
StandF411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045fc  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08004794  08004794  00005794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049e8  080049e8  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080049e8  080049e8  000059e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049f0  080049f0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049f0  080049f0  000059f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049f4  080049f4  000059f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080049f8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  2000005c  08004a54  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08004a54  000063e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad24  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e22  00000000  00000000  00010db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  00012bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006c4  00000000  00000000  000134b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001770f  00000000  00000000  00013b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c094  00000000  00000000  0002b283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000921e9  00000000  00000000  00037317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9500  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002620  00000000  00000000  000c9544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000cbb64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800477c 	.word	0x0800477c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	0800477c 	.word	0x0800477c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f003 0302 	and.w	r3, r3, #2
 80004d8:	2b02      	cmp	r3, #2
 80004da:	bf0c      	ite	eq
 80004dc:	2301      	moveq	r3, #1
 80004de:	2300      	movne	r3, #0
 80004e0:	b2db      	uxtb	r3, r3
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <LL_ADC_ClearFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOCS(ADC_TypeDef *ADCx)
{
 80004ee:	b480      	push	{r7}
 80004f0:	b083      	sub	sp, #12
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f06f 0202 	mvn.w	r2, #2
 80004fc:	601a      	str	r2, [r3, #0]
}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
	...

0800050c <set_pins>:

uint16_t vol_raw;
uint32_t vol_average, tok;
                                               // функции подсчета переменных

void set_pins( uint8_t a3, uint8_t a2, uint8_t a1, uint8_t a0 ){
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	4604      	mov	r4, r0
 8000514:	4608      	mov	r0, r1
 8000516:	4611      	mov	r1, r2
 8000518:	461a      	mov	r2, r3
 800051a:	4623      	mov	r3, r4
 800051c:	71fb      	strb	r3, [r7, #7]
 800051e:	4603      	mov	r3, r0
 8000520:	71bb      	strb	r3, [r7, #6]
 8000522:	460b      	mov	r3, r1
 8000524:	717b      	strb	r3, [r7, #5]
 8000526:	4613      	mov	r3, r2
 8000528:	713b      	strb	r3, [r7, #4]

	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, a3 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	2b00      	cmp	r3, #0
 800052e:	bf14      	ite	ne
 8000530:	2301      	movne	r3, #1
 8000532:	2300      	moveq	r3, #0
 8000534:	b2db      	uxtb	r3, r3
 8000536:	461a      	mov	r2, r3
 8000538:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800053c:	4813      	ldr	r0, [pc, #76]	@ (800058c <set_pins+0x80>)
 800053e:	f002 f9eb 	bl	8002918 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, a2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000542:	79bb      	ldrb	r3, [r7, #6]
 8000544:	2b00      	cmp	r3, #0
 8000546:	bf14      	ite	ne
 8000548:	2301      	movne	r3, #1
 800054a:	2300      	moveq	r3, #0
 800054c:	b2db      	uxtb	r3, r3
 800054e:	461a      	mov	r2, r3
 8000550:	2180      	movs	r1, #128	@ 0x80
 8000552:	480e      	ldr	r0, [pc, #56]	@ (800058c <set_pins+0x80>)
 8000554:	f002 f9e0 	bl	8002918 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, a1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000558:	797b      	ldrb	r3, [r7, #5]
 800055a:	2b00      	cmp	r3, #0
 800055c:	bf14      	ite	ne
 800055e:	2301      	movne	r3, #1
 8000560:	2300      	moveq	r3, #0
 8000562:	b2db      	uxtb	r3, r3
 8000564:	461a      	mov	r2, r3
 8000566:	2140      	movs	r1, #64	@ 0x40
 8000568:	4808      	ldr	r0, [pc, #32]	@ (800058c <set_pins+0x80>)
 800056a:	f002 f9d5 	bl	8002918 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, a0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800056e:	793b      	ldrb	r3, [r7, #4]
 8000570:	2b00      	cmp	r3, #0
 8000572:	bf14      	ite	ne
 8000574:	2301      	movne	r3, #1
 8000576:	2300      	moveq	r3, #0
 8000578:	b2db      	uxtb	r3, r3
 800057a:	461a      	mov	r2, r3
 800057c:	2120      	movs	r1, #32
 800057e:	4803      	ldr	r0, [pc, #12]	@ (800058c <set_pins+0x80>)
 8000580:	f002 f9ca 	bl	8002918 <HAL_GPIO_WritePin>
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	bd90      	pop	{r4, r7, pc}
 800058c:	40020400 	.word	0x40020400

08000590 <test_voltage>:

void test_voltage(uint8_t* buf, uint32_t channel){
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
	vol_average = 0;
 800059a:	4b39      	ldr	r3, [pc, #228]	@ (8000680 <test_voltage+0xf0>)
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
	ADC_ChannelConfTypeDef sConfig = {0};
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
	sConfig.Channel = channel;
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 1;
 80005b2:	2301      	movs	r3, #1
 80005b4:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80005b6:	2301      	movs	r3, #1
 80005b8:	617b      	str	r3, [r7, #20]
	    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	4619      	mov	r1, r3
 80005c0:	4830      	ldr	r0, [pc, #192]	@ (8000684 <test_voltage+0xf4>)
 80005c2:	f001 fc47 	bl	8001e54 <HAL_ADC_ConfigChannel>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d003      	beq.n	80005d4 <test_voltage+0x44>
	    {
	    	buf[0] = STATUS_EXEC_ERROR;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2201      	movs	r2, #1
 80005d0:	701a      	strb	r2, [r3, #0]
	    	        return;
 80005d2:	e052      	b.n	800067a <test_voltage+0xea>
	    }

	HAL_ADC_Start(&hadc1);
 80005d4:	482b      	ldr	r0, [pc, #172]	@ (8000684 <test_voltage+0xf4>)
 80005d6:	f001 fb49 	bl	8001c6c <HAL_ADC_Start>
	for (int i = 0; i < SAMPLES; i++) {
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]
 80005de:	e01b      	b.n	8000618 <test_voltage+0x88>
		 while (!LL_ADC_IsActiveFlag_EOCS(ADC1)) {}
 80005e0:	bf00      	nop
 80005e2:	4829      	ldr	r0, [pc, #164]	@ (8000688 <test_voltage+0xf8>)
 80005e4:	f7ff ff70 	bl	80004c8 <LL_ADC_IsActiveFlag_EOCS>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0f9      	beq.n	80005e2 <test_voltage+0x52>
		 	 	 LL_ADC_ClearFlag_EOCS(ADC1);
 80005ee:	4826      	ldr	r0, [pc, #152]	@ (8000688 <test_voltage+0xf8>)
 80005f0:	f7ff ff7d 	bl	80004ee <LL_ADC_ClearFlag_EOCS>
		         vol_raw = HAL_ADC_GetValue(&hadc1);
 80005f4:	4823      	ldr	r0, [pc, #140]	@ (8000684 <test_voltage+0xf4>)
 80005f6:	f001 fc20 	bl	8001e3a <HAL_ADC_GetValue>
 80005fa:	4603      	mov	r3, r0
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	4b23      	ldr	r3, [pc, #140]	@ (800068c <test_voltage+0xfc>)
 8000600:	801a      	strh	r2, [r3, #0]
		         vol_average += vol_raw;
 8000602:	4b22      	ldr	r3, [pc, #136]	@ (800068c <test_voltage+0xfc>)
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	4b1d      	ldr	r3, [pc, #116]	@ (8000680 <test_voltage+0xf0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4413      	add	r3, r2
 800060e:	4a1c      	ldr	r2, [pc, #112]	@ (8000680 <test_voltage+0xf0>)
 8000610:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < SAMPLES; i++) {
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	3301      	adds	r3, #1
 8000616:	61fb      	str	r3, [r7, #28]
 8000618:	69fb      	ldr	r3, [r7, #28]
 800061a:	2b63      	cmp	r3, #99	@ 0x63
 800061c:	dde0      	ble.n	80005e0 <test_voltage+0x50>
		}
	HAL_ADC_Stop(&hadc1);
 800061e:	4819      	ldr	r0, [pc, #100]	@ (8000684 <test_voltage+0xf4>)
 8000620:	f001 fbd8 	bl	8001dd4 <HAL_ADC_Stop>

	vol_average = vol_average * REFERENCE_VOLTAGE / (ADC_BIT_RATE * SAMPLES);
 8000624:	4b16      	ldr	r3, [pc, #88]	@ (8000680 <test_voltage+0xf0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f640 42e4 	movw	r2, #3300	@ 0xce4
 800062c:	fb02 f303 	mul.w	r3, r2, r3
 8000630:	4a17      	ldr	r2, [pc, #92]	@ (8000690 <test_voltage+0x100>)
 8000632:	fba2 2303 	umull	r2, r3, r2, r3
 8000636:	0c5b      	lsrs	r3, r3, #17
 8000638:	4a11      	ldr	r2, [pc, #68]	@ (8000680 <test_voltage+0xf0>)
 800063a:	6013      	str	r3, [r2, #0]

	buf[1] = (uint8_t)(vol_average & 0xFF);
 800063c:	4b10      	ldr	r3, [pc, #64]	@ (8000680 <test_voltage+0xf0>)
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	3301      	adds	r3, #1
 8000644:	b2d2      	uxtb	r2, r2
 8000646:	701a      	strb	r2, [r3, #0]
	buf[2] = (uint8_t)((vol_average >> 8) & 0xFF);
 8000648:	4b0d      	ldr	r3, [pc, #52]	@ (8000680 <test_voltage+0xf0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	0a1a      	lsrs	r2, r3, #8
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	3302      	adds	r3, #2
 8000652:	b2d2      	uxtb	r2, r2
 8000654:	701a      	strb	r2, [r3, #0]
    buf[3] = (uint8_t)((vol_average >> 16) & 0xFF);
 8000656:	4b0a      	ldr	r3, [pc, #40]	@ (8000680 <test_voltage+0xf0>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	0c1a      	lsrs	r2, r3, #16
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3303      	adds	r3, #3
 8000660:	b2d2      	uxtb	r2, r2
 8000662:	701a      	strb	r2, [r3, #0]
	buf[4] = (uint8_t)((vol_average >> 24) & 0xFF);
 8000664:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <test_voltage+0xf0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	0e1a      	lsrs	r2, r3, #24
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	3304      	adds	r3, #4
 800066e:	b2d2      	uxtb	r2, r2
 8000670:	701a      	strb	r2, [r3, #0]
	buf[0] = STATUS_OK;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
    return;
 8000678:	bf00      	nop
}
 800067a:	3720      	adds	r7, #32
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	2000007c 	.word	0x2000007c
 8000684:	20000084 	.word	0x20000084
 8000688:	40012000 	.word	0x40012000
 800068c:	20000078 	.word	0x20000078
 8000690:	51f0a429 	.word	0x51f0a429

08000694 <apply_relay>:

void apply_relay(GPIO_TypeDef *PORT, uint32_t PIN){
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
	            return(SET_BIT(PORT->BSRR, PIN)); }
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	699a      	ldr	r2, [r3, #24]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	431a      	orrs	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	619a      	str	r2, [r3, #24]
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <uart_tx_rx>:


void uart_tx_rx(UART_HandleTypeDef* uart, uint8_t* buf, uint8_t* tx, uint8_t* rx, size_t size){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	603b      	str	r3, [r7, #0]
	if (HAL_UART_Transmit(uart, tx, size, TIMEOUT_RX) != HAL_OK) {
 80006c2:	69bb      	ldr	r3, [r7, #24]
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80006ca:	6879      	ldr	r1, [r7, #4]
 80006cc:	68f8      	ldr	r0, [r7, #12]
 80006ce:	f002 fde5 	bl	800329c <HAL_UART_Transmit>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d003      	beq.n	80006e0 <uart_tx_rx+0x2c>
		        buf[0] = STATUS_TIMED_OUT;
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	2203      	movs	r2, #3
 80006dc:	701a      	strb	r2, [r3, #0]
		        return;
 80006de:	e026      	b.n	800072e <uart_tx_rx+0x7a>
		    }
		 if (uart->RxState == HAL_UART_STATE_READY) {
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	2b20      	cmp	r3, #32
 80006ea:	d10e      	bne.n	800070a <uart_tx_rx+0x56>
			 if (HAL_UART_Receive(uart, rx, size, TIMEOUT_RX) != HAL_OK) {
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80006f4:	6839      	ldr	r1, [r7, #0]
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f002 fe5b 	bl	80033b2 <HAL_UART_Receive>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d015      	beq.n	800072e <uart_tx_rx+0x7a>
			             buf[0] = STATUS_TIMED_OUT;
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	2203      	movs	r2, #3
 8000706:	701a      	strb	r2, [r3, #0]
			             return;
 8000708:	e011      	b.n	800072e <uart_tx_rx+0x7a>
			         }
			     } else {
			         HAL_UART_AbortReceive(uart);
 800070a:	68f8      	ldr	r0, [r7, #12]
 800070c:	f002 ff43 	bl	8003596 <HAL_UART_AbortReceive>
			         if (HAL_UART_Receive(uart, rx, size, TIMEOUT_RX) != HAL_OK) {
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	b29a      	uxth	r2, r3
 8000714:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000718:	6839      	ldr	r1, [r7, #0]
 800071a:	68f8      	ldr	r0, [r7, #12]
 800071c:	f002 fe49 	bl	80033b2 <HAL_UART_Receive>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d003      	beq.n	800072e <uart_tx_rx+0x7a>
			             buf[0] = STATUS_TIMED_OUT;
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	2203      	movs	r2, #3
 800072a:	701a      	strb	r2, [r3, #0]
			             return;
 800072c:	bf00      	nop
			         }
			     }
}
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <compare_arrays>:

int compare_arrays(uint8_t arr1[], uint8_t arr2[], size_t size){
 8000734:	b480      	push	{r7}
 8000736:	b087      	sub	sp, #28
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < size; i++){
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	e00e      	b.n	8000764 <compare_arrays+0x30>
		if (arr1[i] != arr2[i]){
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	4413      	add	r3, r2
 800074c:	781a      	ldrb	r2, [r3, #0]
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	68b9      	ldr	r1, [r7, #8]
 8000752:	440b      	add	r3, r1
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	429a      	cmp	r2, r3
 8000758:	d001      	beq.n	800075e <compare_arrays+0x2a>
			return 1;
 800075a:	2301      	movs	r3, #1
 800075c:	e007      	b.n	800076e <compare_arrays+0x3a>
	for(int i = 0; i < size; i++){
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	3301      	adds	r3, #1
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	429a      	cmp	r2, r3
 800076a:	d8ec      	bhi.n	8000746 <compare_arrays+0x12>
		}
	}
	return 0;
 800076c:	2300      	movs	r3, #0
}
 800076e:	4618      	mov	r0, r3
 8000770:	371c      	adds	r7, #28
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
	...

0800077c <apply_voltage_relay_1>:
                                                 // функции управления



void apply_voltage_relay_1(uint8_t* buf) // PC14
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	switch (buf[1]) {
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3301      	adds	r3, #1
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d002      	beq.n	8000794 <apply_voltage_relay_1+0x18>
 800078e:	2b01      	cmp	r3, #1
 8000790:	d013      	beq.n	80007ba <apply_voltage_relay_1+0x3e>
 8000792:	e025      	b.n	80007e0 <apply_voltage_relay_1+0x64>
		case CLOSE_RELAY:
			apply_relay(RELAY_PORT_C, RELAY_1_PIN_0);
 8000794:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000798:	4815      	ldr	r0, [pc, #84]	@ (80007f0 <apply_voltage_relay_1+0x74>)
 800079a:	f7ff ff7b 	bl	8000694 <apply_relay>
			if (READ_BIT(RELAY_PORT_C->IDR, RELAY_1_PIN_1) != 0){
 800079e:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <apply_voltage_relay_1+0x74>)
 80007a0:	691b      	ldr	r3, [r3, #16]
 80007a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d003      	beq.n	80007b2 <apply_voltage_relay_1+0x36>
								buf[0] = STATUS_EXEC_ERROR;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2201      	movs	r2, #1
 80007ae:	701a      	strb	r2, [r3, #0]
							} else {
							    buf[0] = STATUS_OK;
							}
			return;
 80007b0:	e01a      	b.n	80007e8 <apply_voltage_relay_1+0x6c>
							    buf[0] = STATUS_OK;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2200      	movs	r2, #0
 80007b6:	701a      	strb	r2, [r3, #0]
			return;
 80007b8:	e016      	b.n	80007e8 <apply_voltage_relay_1+0x6c>
		case OPEN_RELAY:
			apply_relay(RELAY_PORT_C, RELAY_1_PIN_1);
 80007ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007be:	480c      	ldr	r0, [pc, #48]	@ (80007f0 <apply_voltage_relay_1+0x74>)
 80007c0:	f7ff ff68 	bl	8000694 <apply_relay>
			if (READ_BIT(RELAY_PORT_C->IDR, RELAY_1_PIN_1) != 0){
 80007c4:	4b0a      	ldr	r3, [pc, #40]	@ (80007f0 <apply_voltage_relay_1+0x74>)
 80007c6:	691b      	ldr	r3, [r3, #16]
 80007c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d003      	beq.n	80007d8 <apply_voltage_relay_1+0x5c>
								buf[0] = STATUS_OK;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
							} else {
							    buf[0] = STATUS_EXEC_ERROR;
							}
			return;
 80007d6:	e007      	b.n	80007e8 <apply_voltage_relay_1+0x6c>
							    buf[0] = STATUS_EXEC_ERROR;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2201      	movs	r2, #1
 80007dc:	701a      	strb	r2, [r3, #0]
			return;
 80007de:	e003      	b.n	80007e8 <apply_voltage_relay_1+0x6c>
		default:
			buf[0] = STATUS_INVALID_CMD;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2202      	movs	r2, #2
 80007e4:	701a      	strb	r2, [r3, #0]
			return;
 80007e6:	bf00      	nop
	}
}
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40020800 	.word	0x40020800

080007f4 <test_voltage_4_point>:

void test_voltage_4_point(uint8_t* buf)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	apply_relay(GPIOB, MUX_EN);
 80007fc:	2110      	movs	r1, #16
 80007fe:	4820      	ldr	r0, [pc, #128]	@ (8000880 <test_voltage_4_point+0x8c>)
 8000800:	f7ff ff48 	bl	8000694 <apply_relay>
	switch (buf[1])
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3301      	adds	r3, #1
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	3b01      	subs	r3, #1
 800080c:	2b03      	cmp	r3, #3
 800080e:	d827      	bhi.n	8000860 <test_voltage_4_point+0x6c>
 8000810:	a201      	add	r2, pc, #4	@ (adr r2, 8000818 <test_voltage_4_point+0x24>)
 8000812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000816:	bf00      	nop
 8000818:	08000829 	.word	0x08000829
 800081c:	08000837 	.word	0x08000837
 8000820:	08000845 	.word	0x08000845
 8000824:	08000853 	.word	0x08000853
	{
	case CHECKPOINT_5V_PW_Peltier:
		set_pins(0, 0, 1, 1); // set_pins(1, 0, 0, 0);
 8000828:	2301      	movs	r3, #1
 800082a:	2201      	movs	r2, #1
 800082c:	2100      	movs	r1, #0
 800082e:	2000      	movs	r0, #0
 8000830:	f7ff fe6c 	bl	800050c <set_pins>
		break;
 8000834:	e018      	b.n	8000868 <test_voltage_4_point+0x74>

	case CHECKPOINT_5V3:
		set_pins(0, 0, 0, 0); // set_pins(0, 1, 1, 0);
 8000836:	2300      	movs	r3, #0
 8000838:	2200      	movs	r2, #0
 800083a:	2100      	movs	r1, #0
 800083c:	2000      	movs	r0, #0
 800083e:	f7ff fe65 	bl	800050c <set_pins>
		break;
 8000842:	e011      	b.n	8000868 <test_voltage_4_point+0x74>

	case CHECKPOINT_3V3:
		set_pins(0, 1, 1, 0); // set_pins(0, 0, 1, 1);
 8000844:	2300      	movs	r3, #0
 8000846:	2201      	movs	r2, #1
 8000848:	2101      	movs	r1, #1
 800084a:	2000      	movs	r0, #0
 800084c:	f7ff fe5e 	bl	800050c <set_pins>
		break;
 8000850:	e00a      	b.n	8000868 <test_voltage_4_point+0x74>

	case CHECKPOINT_4V_PW_Laser:
		set_pins(0, 0, 1, 0); // set_pins(0, 0, 0, 0);
 8000852:	2300      	movs	r3, #0
 8000854:	2201      	movs	r2, #1
 8000856:	2100      	movs	r1, #0
 8000858:	2000      	movs	r0, #0
 800085a:	f7ff fe57 	bl	800050c <set_pins>
		break;
 800085e:	e003      	b.n	8000868 <test_voltage_4_point+0x74>
	default:
		buf[0] = STATUS_INVALID_CMD;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2202      	movs	r2, #2
 8000864:	701a      	strb	r2, [r3, #0]
		return;
 8000866:	e008      	b.n	800087a <test_voltage_4_point+0x86>
	}
	test_voltage(buf, ADC_MUX);
 8000868:	2101      	movs	r1, #1
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff fe90 	bl	8000590 <test_voltage>
	apply_relay(GPIOB, MUX_DIS);
 8000870:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8000874:	4802      	ldr	r0, [pc, #8]	@ (8000880 <test_voltage_4_point+0x8c>)
 8000876:	f7ff ff0d 	bl	8000694 <apply_relay>
}
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40020400 	.word	0x40020400

08000884 <test_voltage_current>:

void test_voltage_current(uint8_t* buf)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	switch (buf[1])
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3301      	adds	r3, #1
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d002      	beq.n	800089c <test_voltage_current+0x18>
 8000896:	2b01      	cmp	r3, #1
 8000898:	d007      	beq.n	80008aa <test_voltage_current+0x26>
 800089a:	e00d      	b.n	80008b8 <test_voltage_current+0x34>
	{
	case SYPPLY_VOLTAGE:
		uint32_t channel = ADC_SYPPLY_VOLTAGE;
 800089c:	2304      	movs	r3, #4
 800089e:	60bb      	str	r3, [r7, #8]
		test_voltage(buf, channel);
 80008a0:	68b9      	ldr	r1, [r7, #8]
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f7ff fe74 	bl	8000590 <test_voltage>
		return;
 80008a8:	e00a      	b.n	80008c0 <test_voltage_current+0x3c>

	case SUPPLY_CURRENT:
		uint32_t channel_1 = ADC_SUPPLY_CURRENT;
 80008aa:	2305      	movs	r3, #5
 80008ac:	60fb      	str	r3, [r7, #12]
		test_voltage(buf, channel_1);
 80008ae:	68f9      	ldr	r1, [r7, #12]
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff fe6d 	bl	8000590 <test_voltage>
		return;
 80008b6:	e003      	b.n	80008c0 <test_voltage_current+0x3c>

	default:
		buf[0] = STATUS_INVALID_CMD;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2202      	movs	r2, #2
 80008bc:	701a      	strb	r2, [r3, #0]
		return;
 80008be:	bf00      	nop
	}
}
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <apply_voltage_relay_2>:

void apply_voltage_relay_2(uint8_t* buf) // PB9
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	switch (buf[1]) {
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3301      	adds	r3, #1
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d002      	beq.n	80008e0 <apply_voltage_relay_2+0x18>
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d013      	beq.n	8000906 <apply_voltage_relay_2+0x3e>
 80008de:	e025      	b.n	800092c <apply_voltage_relay_2+0x64>
			case CLOSE_RELAY:
				apply_relay(RELAY_PORT_B, RELAY_2_PIN_0);
 80008e0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80008e4:	4815      	ldr	r0, [pc, #84]	@ (800093c <apply_voltage_relay_2+0x74>)
 80008e6:	f7ff fed5 	bl	8000694 <apply_relay>
				if (READ_BIT(RELAY_PORT_B->IDR, RELAY_2_PIN_1) != 0){
 80008ea:	4b14      	ldr	r3, [pc, #80]	@ (800093c <apply_voltage_relay_2+0x74>)
 80008ec:	691b      	ldr	r3, [r3, #16]
 80008ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d003      	beq.n	80008fe <apply_voltage_relay_2+0x36>
						buf[0] = STATUS_EXEC_ERROR;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2201      	movs	r2, #1
 80008fa:	701a      	strb	r2, [r3, #0]
					} else {
					    buf[0] = STATUS_OK;
					}
				return;
 80008fc:	e01a      	b.n	8000934 <apply_voltage_relay_2+0x6c>
					    buf[0] = STATUS_OK;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
				return;
 8000904:	e016      	b.n	8000934 <apply_voltage_relay_2+0x6c>
			case OPEN_RELAY:
				apply_relay(RELAY_PORT_B, RELAY_2_PIN_1);
 8000906:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800090a:	480c      	ldr	r0, [pc, #48]	@ (800093c <apply_voltage_relay_2+0x74>)
 800090c:	f7ff fec2 	bl	8000694 <apply_relay>
				if (READ_BIT(RELAY_PORT_B->IDR, RELAY_2_PIN_1) != 0){
 8000910:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <apply_voltage_relay_2+0x74>)
 8000912:	691b      	ldr	r3, [r3, #16]
 8000914:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000918:	2b00      	cmp	r3, #0
 800091a:	d003      	beq.n	8000924 <apply_voltage_relay_2+0x5c>
						buf[0] = STATUS_OK;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
					} else {
					    buf[0] = STATUS_EXEC_ERROR;
					}
				return;
 8000922:	e007      	b.n	8000934 <apply_voltage_relay_2+0x6c>
					    buf[0] = STATUS_EXEC_ERROR;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2201      	movs	r2, #1
 8000928:	701a      	strb	r2, [r3, #0]
				return;
 800092a:	e003      	b.n	8000934 <apply_voltage_relay_2+0x6c>
			default:
				buf[0] = STATUS_INVALID_CMD;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2202      	movs	r2, #2
 8000930:	701a      	strb	r2, [r3, #0]
				return;
 8000932:	bf00      	nop
		}
}
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40020400 	.word	0x40020400

08000940 <test_voltage_11_point>:

void test_voltage_11_point(uint8_t* buf)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	apply_relay(GPIOB, MUX_EN);
 8000948:	2110      	movs	r1, #16
 800094a:	483f      	ldr	r0, [pc, #252]	@ (8000a48 <test_voltage_11_point+0x108>)
 800094c:	f7ff fea2 	bl	8000694 <apply_relay>
	switch (buf[1])
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3301      	adds	r3, #1
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b0a      	cmp	r3, #10
 8000958:	d865      	bhi.n	8000a26 <test_voltage_11_point+0xe6>
 800095a:	a201      	add	r2, pc, #4	@ (adr r2, 8000960 <test_voltage_11_point+0x20>)
 800095c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000960:	0800098d 	.word	0x0800098d
 8000964:	0800099b 	.word	0x0800099b
 8000968:	080009a9 	.word	0x080009a9
 800096c:	080009b7 	.word	0x080009b7
 8000970:	080009c5 	.word	0x080009c5
 8000974:	080009d3 	.word	0x080009d3
 8000978:	080009e1 	.word	0x080009e1
 800097c:	080009ef 	.word	0x080009ef
 8000980:	080009fd 	.word	0x080009fd
 8000984:	08000a0b 	.word	0x08000a0b
 8000988:	08000a19 	.word	0x08000a19
	{
	case CHECKPOINT_1_2V:
		set_pins(1, 0, 1, 1);
 800098c:	2301      	movs	r3, #1
 800098e:	2201      	movs	r2, #1
 8000990:	2100      	movs	r1, #0
 8000992:	2001      	movs	r0, #1
 8000994:	f7ff fdba 	bl	800050c <set_pins>
		break;
 8000998:	e049      	b.n	8000a2e <test_voltage_11_point+0xee>

	case CHECKPOINT_1_8V:
		set_pins(1, 1, 0, 0);
 800099a:	2300      	movs	r3, #0
 800099c:	2200      	movs	r2, #0
 800099e:	2101      	movs	r1, #1
 80009a0:	2001      	movs	r0, #1
 80009a2:	f7ff fdb3 	bl	800050c <set_pins>
		break;
 80009a6:	e042      	b.n	8000a2e <test_voltage_11_point+0xee>

	case CHECKPOINT_2_5V:
		set_pins(1, 1, 1, 0);
 80009a8:	2300      	movs	r3, #0
 80009aa:	2201      	movs	r2, #1
 80009ac:	2101      	movs	r1, #1
 80009ae:	2001      	movs	r0, #1
 80009b0:	f7ff fdac 	bl	800050c <set_pins>
		break;
 80009b4:	e03b      	b.n	8000a2e <test_voltage_11_point+0xee>

	case CHECKPOINT_GPS_5V:
		set_pins(0, 0, 0, 1);
 80009b6:	2301      	movs	r3, #1
 80009b8:	2200      	movs	r2, #0
 80009ba:	2100      	movs	r1, #0
 80009bc:	2000      	movs	r0, #0
 80009be:	f7ff fda5 	bl	800050c <set_pins>
		break;
 80009c2:	e034      	b.n	8000a2e <test_voltage_11_point+0xee>

	case CHECKPOINT_5V_REFP:
		set_pins(0, 1, 0, 0);
 80009c4:	2300      	movs	r3, #0
 80009c6:	2200      	movs	r2, #0
 80009c8:	2101      	movs	r1, #1
 80009ca:	2000      	movs	r0, #0
 80009cc:	f7ff fd9e 	bl	800050c <set_pins>
		break;
 80009d0:	e02d      	b.n	8000a2e <test_voltage_11_point+0xee>

	case CHECKPOINT_5VAA_sensor:
		set_pins(0, 1, 0, 1);
 80009d2:	2301      	movs	r3, #1
 80009d4:	2200      	movs	r2, #0
 80009d6:	2101      	movs	r1, #1
 80009d8:	2000      	movs	r0, #0
 80009da:	f7ff fd97 	bl	800050c <set_pins>
		break;
 80009de:	e026      	b.n	8000a2e <test_voltage_11_point+0xee>

	case CHECKPOINT_5VAA_NEG:
		set_pins(1, 0, 0, 1);
 80009e0:	2301      	movs	r3, #1
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	2001      	movs	r0, #1
 80009e8:	f7ff fd90 	bl	800050c <set_pins>
		break;
 80009ec:	e01f      	b.n	8000a2e <test_voltage_11_point+0xee>

	case CHECKPOINT_1_8VA:
		set_pins(1, 0, 1, 0);
 80009ee:	2300      	movs	r3, #0
 80009f0:	2201      	movs	r2, #1
 80009f2:	2100      	movs	r1, #0
 80009f4:	2001      	movs	r0, #1
 80009f6:	f7ff fd89 	bl	800050c <set_pins>
		break;
 80009fa:	e018      	b.n	8000a2e <test_voltage_11_point+0xee>

	case CHECKPOINT_5VAA_Amq_A:
		set_pins(1, 1, 0, 1);
 80009fc:	2301      	movs	r3, #1
 80009fe:	2200      	movs	r2, #0
 8000a00:	2101      	movs	r1, #1
 8000a02:	2001      	movs	r0, #1
 8000a04:	f7ff fd82 	bl	800050c <set_pins>
		break;
 8000a08:	e011      	b.n	8000a2e <test_voltage_11_point+0xee>

	case CHECKPOINT_2_048_NEG:
		set_pins(1, 0, 0, 0);
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2001      	movs	r0, #1
 8000a12:	f7ff fd7b 	bl	800050c <set_pins>
		break;
 8000a16:	e00a      	b.n	8000a2e <test_voltage_11_point+0xee>

	case CHECKPOINT_5V_Amq_R:
		set_pins(1, 1, 1, 1);
 8000a18:	2301      	movs	r3, #1
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	2001      	movs	r0, #1
 8000a20:	f7ff fd74 	bl	800050c <set_pins>
		break;
 8000a24:	e003      	b.n	8000a2e <test_voltage_11_point+0xee>

	default:
		buf[0] = STATUS_INVALID_CMD;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2202      	movs	r2, #2
 8000a2a:	701a      	strb	r2, [r3, #0]
		return;
 8000a2c:	e008      	b.n	8000a40 <test_voltage_11_point+0x100>
	}
	test_voltage(buf, ADC_MUX);
 8000a2e:	2101      	movs	r1, #1
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff fdad 	bl	8000590 <test_voltage>
	apply_relay(GPIOB, MUX_DIS);
 8000a36:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8000a3a:	4803      	ldr	r0, [pc, #12]	@ (8000a48 <test_voltage_11_point+0x108>)
 8000a3c:	f7ff fe2a 	bl	8000694 <apply_relay>
}
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40020400 	.word	0x40020400

08000a4c <test_corrent_laser>:

void test_corrent_laser(uint8_t* buf)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b0ba      	sub	sp, #232	@ 0xe8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	uint16_t adcSamples[SAMPLES_LASER];
	ADC_ChannelConfTypeDef sConfig = {0};
 8000a54:	f107 0308 	add.w	r3, r7, #8
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_LASER;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	613b      	str	r3, [r7, #16]
		    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a6e:	f107 0308 	add.w	r3, r7, #8
 8000a72:	4619      	mov	r1, r3
 8000a74:	4838      	ldr	r0, [pc, #224]	@ (8000b58 <test_corrent_laser+0x10c>)
 8000a76:	f001 f9ed 	bl	8001e54 <HAL_ADC_ConfigChannel>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d003      	beq.n	8000a88 <test_corrent_laser+0x3c>
		    {
		    	buf[0] = STATUS_EXEC_ERROR;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2201      	movs	r2, #1
 8000a84:	701a      	strb	r2, [r3, #0]
 8000a86:	e063      	b.n	8000b50 <test_corrent_laser+0x104>
		    	return;
		    }
	HAL_ADC_Start(&hadc1);
 8000a88:	4833      	ldr	r0, [pc, #204]	@ (8000b58 <test_corrent_laser+0x10c>)
 8000a8a:	f001 f8ef 	bl	8001c6c <HAL_ADC_Start>
		    for (int i = 0; i < SAMPLES_LASER; i++) {
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000a94:	e01a      	b.n	8000acc <test_corrent_laser+0x80>
			     while (!LL_ADC_IsActiveFlag_EOCS(ADC1)) {}
 8000a96:	bf00      	nop
 8000a98:	4830      	ldr	r0, [pc, #192]	@ (8000b5c <test_corrent_laser+0x110>)
 8000a9a:	f7ff fd15 	bl	80004c8 <LL_ADC_IsActiveFlag_EOCS>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d0f9      	beq.n	8000a98 <test_corrent_laser+0x4c>
			 	 	    LL_ADC_ClearFlag_EOCS(ADC1);
 8000aa4:	482d      	ldr	r0, [pc, #180]	@ (8000b5c <test_corrent_laser+0x110>)
 8000aa6:	f7ff fd22 	bl	80004ee <LL_ADC_ClearFlag_EOCS>
			 	 	    adcSamples[i] = HAL_ADC_GetValue(&hadc1);
 8000aaa:	482b      	ldr	r0, [pc, #172]	@ (8000b58 <test_corrent_laser+0x10c>)
 8000aac:	f001 f9c5 	bl	8001e3a <HAL_ADC_GetValue>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	33e8      	adds	r3, #232	@ 0xe8
 8000abc:	443b      	add	r3, r7
 8000abe:	f823 2cd0 	strh.w	r2, [r3, #-208]
		    for (int i = 0; i < SAMPLES_LASER; i++) {
 8000ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000ad0:	2b63      	cmp	r3, #99	@ 0x63
 8000ad2:	dde0      	ble.n	8000a96 <test_corrent_laser+0x4a>
			}
		    HAL_ADC_Stop(&hadc1);
 8000ad4:	4820      	ldr	r0, [pc, #128]	@ (8000b58 <test_corrent_laser+0x10c>)
 8000ad6:	f001 f97d 	bl	8001dd4 <HAL_ADC_Stop>
		    for (int i = 0; i < SAMPLES_LASER; i++){
 8000ada:	2300      	movs	r3, #0
 8000adc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8000ae0:	e02f      	b.n	8000b42 <test_corrent_laser+0xf6>
			     vol_average = adcSamples[i] * REFERENCE_VOLTAGE / ADC_BIT_RATE;
 8000ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	33e8      	adds	r3, #232	@ 0xe8
 8000aea:	443b      	add	r3, r7
 8000aec:	f833 3cd0 	ldrh.w	r3, [r3, #-208]
 8000af0:	461a      	mov	r2, r3
 8000af2:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8000af6:	fb02 f303 	mul.w	r3, r2, r3
 8000afa:	4a19      	ldr	r2, [pc, #100]	@ (8000b60 <test_corrent_laser+0x114>)
 8000afc:	fb82 1203 	smull	r1, r2, r2, r3
 8000b00:	441a      	add	r2, r3
 8000b02:	12d2      	asrs	r2, r2, #11
 8000b04:	17db      	asrs	r3, r3, #31
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b16      	ldr	r3, [pc, #88]	@ (8000b64 <test_corrent_laser+0x118>)
 8000b0c:	601a      	str	r2, [r3, #0]
			     buf[i * 2 + 1] = (uint8_t)(vol_average & 0xFF);
 8000b0e:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <test_corrent_laser+0x118>)
 8000b10:	6819      	ldr	r1, [r3, #0]
 8000b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	3301      	adds	r3, #1
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	b2ca      	uxtb	r2, r1
 8000b20:	701a      	strb	r2, [r3, #0]
			     buf[i * 2 + 2] = (uint8_t)(vol_average >> 8 & 0xFF);
 8000b22:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <test_corrent_laser+0x118>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	0a19      	lsrs	r1, r3, #8
 8000b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	3302      	adds	r3, #2
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	4413      	add	r3, r2
 8000b34:	b2ca      	uxtb	r2, r1
 8000b36:	701a      	strb	r2, [r3, #0]
		    for (int i = 0; i < SAMPLES_LASER; i++){
 8000b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8000b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000b46:	2b63      	cmp	r3, #99	@ 0x63
 8000b48:	ddcb      	ble.n	8000ae2 <test_corrent_laser+0x96>
		    }
	buf[0] = STATUS_OK;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
}
 8000b50:	37e8      	adds	r7, #232	@ 0xe8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000084 	.word	0x20000084
 8000b5c:	40012000 	.word	0x40012000
 8000b60:	80080081 	.word	0x80080081
 8000b64:	2000007c 	.word	0x2000007c

08000b68 <test_voltage_peltie>:

void test_voltage_peltie(uint8_t* buf)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08e      	sub	sp, #56	@ 0x38
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	int32_t vol_raw, tok = 0, vol_average_1 = 0, vol_average_2 = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8000b74:	2300      	movs	r3, #0
 8000b76:	633b      	str	r3, [r7, #48]	@ 0x30
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t res_shunt = RES_SHUNT_PELTIE;
 8000b7c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000b80:	623b      	str	r3, [r7, #32]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_PELTIE_1;
 8000b90:	2306      	movs	r3, #6
 8000b92:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 1;
 8000b94:	2301      	movs	r3, #1
 8000b96:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b9c:	f107 030c 	add.w	r3, r7, #12
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4857      	ldr	r0, [pc, #348]	@ (8000d00 <test_voltage_peltie+0x198>)
 8000ba4:	f001 f956 	bl	8001e54 <HAL_ADC_ConfigChannel>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d003      	beq.n	8000bb6 <test_voltage_peltie+0x4e>
	{
		buf[0] = STATUS_EXEC_ERROR;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
		return;
 8000bb4:	e0a0      	b.n	8000cf8 <test_voltage_peltie+0x190>
	}

	HAL_ADC_Start(&hadc1);
 8000bb6:	4852      	ldr	r0, [pc, #328]	@ (8000d00 <test_voltage_peltie+0x198>)
 8000bb8:	f001 f858 	bl	8001c6c <HAL_ADC_Start>
	for (int i = 0; i < SAMPLES; i++) {
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000bc0:	e015      	b.n	8000bee <test_voltage_peltie+0x86>
		 while (!LL_ADC_IsActiveFlag_EOCS(ADC1)) {}
 8000bc2:	bf00      	nop
 8000bc4:	484f      	ldr	r0, [pc, #316]	@ (8000d04 <test_voltage_peltie+0x19c>)
 8000bc6:	f7ff fc7f 	bl	80004c8 <LL_ADC_IsActiveFlag_EOCS>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d0f9      	beq.n	8000bc4 <test_voltage_peltie+0x5c>
				LL_ADC_ClearFlag_EOCS(ADC1);
 8000bd0:	484c      	ldr	r0, [pc, #304]	@ (8000d04 <test_voltage_peltie+0x19c>)
 8000bd2:	f7ff fc8c 	bl	80004ee <LL_ADC_ClearFlag_EOCS>
				vol_raw = HAL_ADC_GetValue(&hadc1);
 8000bd6:	484a      	ldr	r0, [pc, #296]	@ (8000d00 <test_voltage_peltie+0x198>)
 8000bd8:	f001 f92f 	bl	8001e3a <HAL_ADC_GetValue>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	61fb      	str	r3, [r7, #28]
				vol_average_1 += vol_raw;
 8000be0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	4413      	add	r3, r2
 8000be6:	633b      	str	r3, [r7, #48]	@ 0x30
	for (int i = 0; i < SAMPLES; i++) {
 8000be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bea:	3301      	adds	r3, #1
 8000bec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bf0:	2b63      	cmp	r3, #99	@ 0x63
 8000bf2:	dde6      	ble.n	8000bc2 <test_voltage_peltie+0x5a>
	}

	HAL_ADC_Stop(&hadc1);
 8000bf4:	4842      	ldr	r0, [pc, #264]	@ (8000d00 <test_voltage_peltie+0x198>)
 8000bf6:	f001 f8ed 	bl	8001dd4 <HAL_ADC_Stop>
	vol_average_1 = vol_average_1 * REFERENCE_VOLTAGE / (ADC_BIT_RATE * SAMPLES);
 8000bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bfc:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000c00:	fb02 f303 	mul.w	r3, r2, r3
 8000c04:	4a40      	ldr	r2, [pc, #256]	@ (8000d08 <test_voltage_peltie+0x1a0>)
 8000c06:	fb82 1203 	smull	r1, r2, r2, r3
 8000c0a:	1452      	asrs	r2, r2, #17
 8000c0c:	17db      	asrs	r3, r3, #31
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	633b      	str	r3, [r7, #48]	@ 0x30

	sConfig.Channel = ADC_PELTIE_2;
 8000c12:	2307      	movs	r3, #7
 8000c14:	60fb      	str	r3, [r7, #12]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4838      	ldr	r0, [pc, #224]	@ (8000d00 <test_voltage_peltie+0x198>)
 8000c1e:	f001 f919 	bl	8001e54 <HAL_ADC_ConfigChannel>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d003      	beq.n	8000c30 <test_voltage_peltie+0xc8>
	{
		buf[0] = STATUS_EXEC_ERROR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
		 return;
 8000c2e:	e063      	b.n	8000cf8 <test_voltage_peltie+0x190>
	}

	HAL_ADC_Start(&hadc1);
 8000c30:	4833      	ldr	r0, [pc, #204]	@ (8000d00 <test_voltage_peltie+0x198>)
 8000c32:	f001 f81b 	bl	8001c6c <HAL_ADC_Start>
	for (int i = 0; i < SAMPLES; i++) {
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c3a:	e015      	b.n	8000c68 <test_voltage_peltie+0x100>
		 while (!LL_ADC_IsActiveFlag_EOCS(ADC1)) {}
 8000c3c:	bf00      	nop
 8000c3e:	4831      	ldr	r0, [pc, #196]	@ (8000d04 <test_voltage_peltie+0x19c>)
 8000c40:	f7ff fc42 	bl	80004c8 <LL_ADC_IsActiveFlag_EOCS>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d0f9      	beq.n	8000c3e <test_voltage_peltie+0xd6>
				LL_ADC_ClearFlag_EOCS(ADC1);
 8000c4a:	482e      	ldr	r0, [pc, #184]	@ (8000d04 <test_voltage_peltie+0x19c>)
 8000c4c:	f7ff fc4f 	bl	80004ee <LL_ADC_ClearFlag_EOCS>
				vol_raw = HAL_ADC_GetValue(&hadc1);
 8000c50:	482b      	ldr	r0, [pc, #172]	@ (8000d00 <test_voltage_peltie+0x198>)
 8000c52:	f001 f8f2 	bl	8001e3a <HAL_ADC_GetValue>
 8000c56:	4603      	mov	r3, r0
 8000c58:	61fb      	str	r3, [r7, #28]
				vol_average_2 += vol_raw;
 8000c5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	4413      	add	r3, r2
 8000c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int i = 0; i < SAMPLES; i++) {
 8000c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c64:	3301      	adds	r3, #1
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c6a:	2b63      	cmp	r3, #99	@ 0x63
 8000c6c:	dde6      	ble.n	8000c3c <test_voltage_peltie+0xd4>
	}

	HAL_ADC_Stop(&hadc1);
 8000c6e:	4824      	ldr	r0, [pc, #144]	@ (8000d00 <test_voltage_peltie+0x198>)
 8000c70:	f001 f8b0 	bl	8001dd4 <HAL_ADC_Stop>
	vol_average_2 = vol_average_2 * REFERENCE_VOLTAGE / (ADC_BIT_RATE * SAMPLES);
 8000c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c76:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000c7a:	fb02 f303 	mul.w	r3, r2, r3
 8000c7e:	4a22      	ldr	r2, [pc, #136]	@ (8000d08 <test_voltage_peltie+0x1a0>)
 8000c80:	fb82 1203 	smull	r1, r2, r2, r3
 8000c84:	1452      	asrs	r2, r2, #17
 8000c86:	17db      	asrs	r3, r3, #31
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	tok = vol_average_1 - vol_average_2;
 8000c8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	637b      	str	r3, [r7, #52]	@ 0x34
	buf[1] = (uint8_t)(tok & 0xFF);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3301      	adds	r3, #1
 8000c98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000c9a:	b2d2      	uxtb	r2, r2
 8000c9c:	701a      	strb	r2, [r3, #0]
	buf[2] = (uint8_t)(tok >> 8 & 0xFF);
 8000c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ca0:	121a      	asrs	r2, r3, #8
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3302      	adds	r3, #2
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	701a      	strb	r2, [r3, #0]
	if (tok > 0) {
 8000caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	dd0b      	ble.n	8000cc8 <test_voltage_peltie+0x160>
		buf[0] = STATUS_EXEC_ERROR;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	701a      	strb	r2, [r3, #0]
		tok = (tok * 1000000) / res_shunt; // мкА
 8000cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cb8:	4a14      	ldr	r2, [pc, #80]	@ (8000d0c <test_voltage_peltie+0x1a4>)
 8000cba:	fb03 f202 	mul.w	r2, r3, r2
 8000cbe:	6a3b      	ldr	r3, [r7, #32]
 8000cc0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8000cc6:	e00a      	b.n	8000cde <test_voltage_peltie+0x176>
	} else {
		buf[0] = STATUS_OK;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
		tok = (tok * 1000000) / res_shunt; // мкА
 8000cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cd0:	4a0e      	ldr	r2, [pc, #56]	@ (8000d0c <test_voltage_peltie+0x1a4>)
 8000cd2:	fb03 f202 	mul.w	r2, r3, r2
 8000cd6:	6a3b      	ldr	r3, [r7, #32]
 8000cd8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cdc:	637b      	str	r3, [r7, #52]	@ 0x34
	}
	buf[3] = (uint8_t)(tok >> 16 & 0xFF);
 8000cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ce0:	141a      	asrs	r2, r3, #16
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3303      	adds	r3, #3
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	701a      	strb	r2, [r3, #0]
	buf[4] = (uint8_t)(tok >> 24 & 0xFF);
 8000cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cec:	161a      	asrs	r2, r3, #24
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	701a      	strb	r2, [r3, #0]
	return;
 8000cf6:	bf00      	nop
}
 8000cf8:	3738      	adds	r7, #56	@ 0x38
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000084 	.word	0x20000084
 8000d04:	40012000 	.word	0x40012000
 8000d08:	51f0a429 	.word	0x51f0a429
 8000d0c:	000f4240 	.word	0x000f4240

08000d10 <apply_voltage_relay_5>:

void apply_voltage_relay_5(uint8_t* buf) // PC13
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	switch (buf[1]) {
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d002      	beq.n	8000d28 <apply_voltage_relay_5+0x18>
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d013      	beq.n	8000d4e <apply_voltage_relay_5+0x3e>
 8000d26:	e025      	b.n	8000d74 <apply_voltage_relay_5+0x64>
			case CLOSE_RELAY:
				apply_relay(RELAY_PORT_C, RELAY_5_PIN_0);
 8000d28:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
 8000d2c:	4815      	ldr	r0, [pc, #84]	@ (8000d84 <apply_voltage_relay_5+0x74>)
 8000d2e:	f7ff fcb1 	bl	8000694 <apply_relay>
				if (READ_BIT(RELAY_PORT_C->IDR, RELAY_5_PIN_1) != 0){
 8000d32:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <apply_voltage_relay_5+0x74>)
 8000d34:	691b      	ldr	r3, [r3, #16]
 8000d36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <apply_voltage_relay_5+0x36>
						buf[0] = STATUS_EXEC_ERROR;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2201      	movs	r2, #1
 8000d42:	701a      	strb	r2, [r3, #0]
					} else {
					    buf[0] = STATUS_OK;
					}
				return;
 8000d44:	e01a      	b.n	8000d7c <apply_voltage_relay_5+0x6c>
					    buf[0] = STATUS_OK;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
				return;
 8000d4c:	e016      	b.n	8000d7c <apply_voltage_relay_5+0x6c>
			case OPEN_RELAY:
				apply_relay(RELAY_PORT_C, RELAY_5_PIN_1);
 8000d4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d52:	480c      	ldr	r0, [pc, #48]	@ (8000d84 <apply_voltage_relay_5+0x74>)
 8000d54:	f7ff fc9e 	bl	8000694 <apply_relay>
				if (READ_BIT(RELAY_PORT_C->IDR, RELAY_5_PIN_1) != 0){
 8000d58:	4b0a      	ldr	r3, [pc, #40]	@ (8000d84 <apply_voltage_relay_5+0x74>)
 8000d5a:	691b      	ldr	r3, [r3, #16]
 8000d5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d003      	beq.n	8000d6c <apply_voltage_relay_5+0x5c>
						buf[0] = STATUS_OK;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
					} else {
					    buf[0] = STATUS_EXEC_ERROR;
					}
				return;
 8000d6a:	e007      	b.n	8000d7c <apply_voltage_relay_5+0x6c>
					    buf[0] = STATUS_EXEC_ERROR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2201      	movs	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]
				return;
 8000d72:	e003      	b.n	8000d7c <apply_voltage_relay_5+0x6c>
			default:
				buf[0] = STATUS_INVALID_CMD;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2202      	movs	r2, #2
 8000d78:	701a      	strb	r2, [r3, #0]
				return;
 8000d7a:	bf00      	nop
		}
}
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40020800 	.word	0x40020800

08000d88 <massage_rs232>:

void massage_rs232(uint8_t* buf)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	@ 0x28
 8000d8c:	af02      	add	r7, sp, #8
 8000d8e:	6078      	str	r0, [r7, #4]
	uint8_t rs_232_tx [RS_232] = "RS_232!";
 8000d90:	4a1e      	ldr	r2, [pc, #120]	@ (8000e0c <massage_rs232+0x84>)
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d9a:	6018      	str	r0, [r3, #0]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	8019      	strh	r1, [r3, #0]
 8000da0:	3302      	adds	r3, #2
 8000da2:	0c0a      	lsrs	r2, r1, #16
 8000da4:	701a      	strb	r2, [r3, #0]
	uint8_t rs_232_rx [RS_232];
	uart_tx_rx(&UART_RS_232, buf, rs_232_tx, rs_232_rx, RS_232);
 8000da6:	f107 030c 	add.w	r3, r7, #12
 8000daa:	f107 0214 	add.w	r2, r7, #20
 8000dae:	2107      	movs	r1, #7
 8000db0:	9100      	str	r1, [sp, #0]
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	4816      	ldr	r0, [pc, #88]	@ (8000e10 <massage_rs232+0x88>)
 8000db6:	f7ff fc7d 	bl	80006b4 <uart_tx_rx>

	if (buf[0] == STATUS_TIMED_OUT){ return; }
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b03      	cmp	r3, #3
 8000dc0:	d020      	beq.n	8000e04 <massage_rs232+0x7c>

	if (compare_arrays(rs_232_tx, rs_232_rx, RS_232) == 0){
 8000dc2:	f107 010c 	add.w	r1, r7, #12
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	2207      	movs	r2, #7
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fcb1 	bl	8000734 <compare_arrays>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d103      	bne.n	8000de0 <massage_rs232+0x58>
		buf[0] = STATUS_OK;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
 8000dde:	e002      	b.n	8000de6 <massage_rs232+0x5e>
	}
	else {
		buf[0] = STATUS_EXEC_ERROR;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
	}
	for (int i = 1; i < 5; i++){
 8000de6:	2301      	movs	r3, #1
 8000de8:	61fb      	str	r3, [r7, #28]
 8000dea:	e007      	b.n	8000dfc <massage_rs232+0x74>
		buf[i] = 0;
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 5; i++){
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	61fb      	str	r3, [r7, #28]
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	ddf4      	ble.n	8000dec <massage_rs232+0x64>
 8000e02:	e000      	b.n	8000e06 <massage_rs232+0x7e>
	if (buf[0] == STATUS_TIMED_OUT){ return; }
 8000e04:	bf00      	nop
	}
}
 8000e06:	3720      	adds	r7, #32
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	08004794 	.word	0x08004794
 8000e10:	200000cc 	.word	0x200000cc

08000e14 <massage_gps>:

void massage_gps(uint8_t* buf)
{
 8000e14:	b5b0      	push	{r4, r5, r7, lr}
 8000e16:	b09e      	sub	sp, #120	@ 0x78
 8000e18:	af02      	add	r7, sp, #8
 8000e1a:	6078      	str	r0, [r7, #4]
	uint8_t gps_tx [GPS_SIZE] = "$GNGLL,5502.49000,N,08256.07600,E,1235  .000,A,A*"; // GLL, version 4.1 and 4.2, NMEA 0183
 8000e1c:	4b26      	ldr	r3, [pc, #152]	@ (8000eb8 <massage_gps+0xa4>)
 8000e1e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000e22:	461d      	mov	r5, r3
 8000e24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e30:	682b      	ldr	r3, [r5, #0]
 8000e32:	7023      	strb	r3, [r4, #0]
	uint8_t gps_rx [GPS_SIZE];
	gps_tx[38] = (buf[1]/ 10) + '0';
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3301      	adds	r3, #1
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	4a20      	ldr	r2, [pc, #128]	@ (8000ebc <massage_gps+0xa8>)
 8000e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e40:	08db      	lsrs	r3, r3, #3
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	3330      	adds	r3, #48	@ 0x30
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	gps_tx[39] = (buf[1] % 10) + '0';
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	781a      	ldrb	r2, [r3, #0]
 8000e52:	4b1a      	ldr	r3, [pc, #104]	@ (8000ebc <massage_gps+0xa8>)
 8000e54:	fba3 1302 	umull	r1, r3, r3, r2
 8000e58:	08d9      	lsrs	r1, r3, #3
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	440b      	add	r3, r1
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	3330      	adds	r3, #48	@ 0x30
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
	uart_tx_rx(&UART_GPS, buf, gps_tx, gps_rx, GPS_SIZE);
 8000e6e:	f107 0308 	add.w	r3, r7, #8
 8000e72:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8000e76:	2131      	movs	r1, #49	@ 0x31
 8000e78:	9100      	str	r1, [sp, #0]
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	4810      	ldr	r0, [pc, #64]	@ (8000ec0 <massage_gps+0xac>)
 8000e7e:	f7ff fc19 	bl	80006b4 <uart_tx_rx>

	if (buf[0] == STATUS_TIMED_OUT){ return; }
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d012      	beq.n	8000eb0 <massage_gps+0x9c>

	if (compare_arrays(gps_tx, gps_rx, GPS_SIZE) == 0){
 8000e8a:	f107 0108 	add.w	r1, r7, #8
 8000e8e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000e92:	2231      	movs	r2, #49	@ 0x31
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fc4d 	bl	8000734 <compare_arrays>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d103      	bne.n	8000ea8 <massage_gps+0x94>
			buf[0] = STATUS_OK;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
 8000ea6:	e004      	b.n	8000eb2 <massage_gps+0x9e>
		}
		else {
			buf[0] = STATUS_EXEC_ERROR;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	701a      	strb	r2, [r3, #0]
 8000eae:	e000      	b.n	8000eb2 <massage_gps+0x9e>
	if (buf[0] == STATUS_TIMED_OUT){ return; }
 8000eb0:	bf00      	nop
		}
}
 8000eb2:	3770      	adds	r7, #112	@ 0x70
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8000eb8:	0800479c 	.word	0x0800479c
 8000ebc:	cccccccd 	.word	0xcccccccd
 8000ec0:	200000cc 	.word	0x200000cc

08000ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eca:	f000 fe19 	bl	8001b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ece:	f000 f84b 	bl	8000f68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed2:	f000 f981 	bl	80011d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ed6:	f000 f901 	bl	80010dc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000eda:	f000 f929 	bl	8001130 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000ede:	f000 f951 	bl	8001184 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000ee2:	f000 f8a9 	bl	8001038 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive_IT(&UART_USB, &rx_byte, 1);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	4918      	ldr	r1, [pc, #96]	@ (8000f4c <main+0x88>)
 8000eea:	4819      	ldr	r0, [pc, #100]	@ (8000f50 <main+0x8c>)
 8000eec:	f002 fb2e 	bl	800354c <HAL_UART_Receive_IT>
	  if (status == STATUS_OK){
 8000ef0:	4b18      	ldr	r3, [pc, #96]	@ (8000f54 <main+0x90>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1f6      	bne.n	8000ee6 <main+0x22>
		  enum parser_result result;
		  	          result = process_rx_byte(&parser, rx_byte);
 8000ef8:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <main+0x88>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	4816      	ldr	r0, [pc, #88]	@ (8000f58 <main+0x94>)
 8000f00:	f000 faaa 	bl	8001458 <process_rx_byte>
 8000f04:	4603      	mov	r3, r0
 8000f06:	71fb      	strb	r3, [r7, #7]
		  	          if (result == PARSER_DONE) {
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d114      	bne.n	8000f38 <main+0x74>
		                  choose_command(parser.buffer, &parser.buffer_length);
 8000f0e:	4913      	ldr	r1, [pc, #76]	@ (8000f5c <main+0x98>)
 8000f10:	4813      	ldr	r0, [pc, #76]	@ (8000f60 <main+0x9c>)
 8000f12:	f000 fb6f 	bl	80015f4 <choose_command>
		                  transmission(&data, &parser);
 8000f16:	4910      	ldr	r1, [pc, #64]	@ (8000f58 <main+0x94>)
 8000f18:	4812      	ldr	r0, [pc, #72]	@ (8000f64 <main+0xa0>)
 8000f1a:	f000 fbc1 	bl	80016a0 <transmission>
		                  serialize_reply(&data);
 8000f1e:	4811      	ldr	r0, [pc, #68]	@ (8000f64 <main+0xa0>)
 8000f20:	f000 fa2c 	bl	800137c <serialize_reply>
		                  HAL_UART_Transmit_IT(&UART_USB, data.buf, data.buf_size);
 8000f24:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <main+0xa0>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0e      	ldr	r2, [pc, #56]	@ (8000f64 <main+0xa0>)
 8000f2a:	6852      	ldr	r2, [r2, #4]
 8000f2c:	b292      	uxth	r2, r2
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4807      	ldr	r0, [pc, #28]	@ (8000f50 <main+0x8c>)
 8000f32:	f002 fad5 	bl	80034e0 <HAL_UART_Transmit_IT>
 8000f36:	e005      	b.n	8000f44 <main+0x80>
		  	          }
		  	        else if (result == PARSER_ERROR) {
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d102      	bne.n	8000f44 <main+0x80>
		  	        	        	   parser.state = STATE_SYNC;
 8000f3e:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <main+0x94>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
		  	        	          }
		  status = STATUS_EXEC_ERROR;
 8000f44:	4b03      	ldr	r3, [pc, #12]	@ (8000f54 <main+0x90>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&UART_USB, &rx_byte, 1);
 8000f4a:	e7cc      	b.n	8000ee6 <main+0x22>
 8000f4c:	20000080 	.word	0x20000080
 8000f50:	20000114 	.word	0x20000114
 8000f54:	20000081 	.word	0x20000081
 8000f58:	200001a4 	.word	0x200001a4
 8000f5c:	20000270 	.word	0x20000270
 8000f60:	200001a5 	.word	0x200001a5
 8000f64:	2000027c 	.word	0x2000027c

08000f68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b094      	sub	sp, #80	@ 0x50
 8000f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6e:	f107 0320 	add.w	r3, r7, #32
 8000f72:	2230      	movs	r2, #48	@ 0x30
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f003 fbbc 	bl	80046f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	4b27      	ldr	r3, [pc, #156]	@ (8001030 <SystemClock_Config+0xc8>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f94:	4a26      	ldr	r2, [pc, #152]	@ (8001030 <SystemClock_Config+0xc8>)
 8000f96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f9c:	4b24      	ldr	r3, [pc, #144]	@ (8001030 <SystemClock_Config+0xc8>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	4b21      	ldr	r3, [pc, #132]	@ (8001034 <SystemClock_Config+0xcc>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a20      	ldr	r2, [pc, #128]	@ (8001034 <SystemClock_Config+0xcc>)
 8000fb2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8001034 <SystemClock_Config+0xcc>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fc8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000fd8:	2319      	movs	r3, #25
 8000fda:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000fdc:	2390      	movs	r3, #144	@ 0x90
 8000fde:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe8:	f107 0320 	add.w	r3, r7, #32
 8000fec:	4618      	mov	r0, r3
 8000fee:	f001 fcad 	bl	800294c <HAL_RCC_OscConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ff8:	f000 f97c 	bl	80012f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001000:	2302      	movs	r3, #2
 8001002:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001008:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800100c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	2102      	movs	r1, #2
 8001018:	4618      	mov	r0, r3
 800101a:	f001 ff0f 	bl	8002e3c <HAL_RCC_ClockConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001024:	f000 f966 	bl	80012f4 <Error_Handler>
  }
}
 8001028:	bf00      	nop
 800102a:	3750      	adds	r7, #80	@ 0x50
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40023800 	.word	0x40023800
 8001034:	40007000 	.word	0x40007000

08001038 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800103e:	463b      	mov	r3, r7
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800104a:	4b21      	ldr	r3, [pc, #132]	@ (80010d0 <MX_ADC1_Init+0x98>)
 800104c:	4a21      	ldr	r2, [pc, #132]	@ (80010d4 <MX_ADC1_Init+0x9c>)
 800104e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001050:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <MX_ADC1_Init+0x98>)
 8001052:	2200      	movs	r2, #0
 8001054:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001056:	4b1e      	ldr	r3, [pc, #120]	@ (80010d0 <MX_ADC1_Init+0x98>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800105c:	4b1c      	ldr	r3, [pc, #112]	@ (80010d0 <MX_ADC1_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001062:	4b1b      	ldr	r3, [pc, #108]	@ (80010d0 <MX_ADC1_Init+0x98>)
 8001064:	2201      	movs	r2, #1
 8001066:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001068:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <MX_ADC1_Init+0x98>)
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001070:	4b17      	ldr	r3, [pc, #92]	@ (80010d0 <MX_ADC1_Init+0x98>)
 8001072:	2200      	movs	r2, #0
 8001074:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001076:	4b16      	ldr	r3, [pc, #88]	@ (80010d0 <MX_ADC1_Init+0x98>)
 8001078:	4a17      	ldr	r2, [pc, #92]	@ (80010d8 <MX_ADC1_Init+0xa0>)
 800107a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107c:	4b14      	ldr	r3, [pc, #80]	@ (80010d0 <MX_ADC1_Init+0x98>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001082:	4b13      	ldr	r3, [pc, #76]	@ (80010d0 <MX_ADC1_Init+0x98>)
 8001084:	2201      	movs	r2, #1
 8001086:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001088:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <MX_ADC1_Init+0x98>)
 800108a:	2200      	movs	r2, #0
 800108c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001090:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <MX_ADC1_Init+0x98>)
 8001092:	2200      	movs	r2, #0
 8001094:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001096:	480e      	ldr	r0, [pc, #56]	@ (80010d0 <MX_ADC1_Init+0x98>)
 8001098:	f000 fda4 	bl	8001be4 <HAL_ADC_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010a2:	f000 f927 	bl	80012f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010aa:	2301      	movs	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b2:	463b      	mov	r3, r7
 80010b4:	4619      	mov	r1, r3
 80010b6:	4806      	ldr	r0, [pc, #24]	@ (80010d0 <MX_ADC1_Init+0x98>)
 80010b8:	f000 fecc 	bl	8001e54 <HAL_ADC_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010c2:	f000 f917 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000084 	.word	0x20000084
 80010d4:	40012000 	.word	0x40012000
 80010d8:	0f000001 	.word	0x0f000001

080010dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010e0:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <MX_USART1_UART_Init+0x4c>)
 80010e2:	4a12      	ldr	r2, [pc, #72]	@ (800112c <MX_USART1_UART_Init+0x50>)
 80010e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010e6:	4b10      	ldr	r3, [pc, #64]	@ (8001128 <MX_USART1_UART_Init+0x4c>)
 80010e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <MX_USART1_UART_Init+0x4c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <MX_USART1_UART_Init+0x4c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <MX_USART1_UART_Init+0x4c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001100:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <MX_USART1_UART_Init+0x4c>)
 8001102:	220c      	movs	r2, #12
 8001104:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001106:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <MX_USART1_UART_Init+0x4c>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <MX_USART1_UART_Init+0x4c>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001112:	4805      	ldr	r0, [pc, #20]	@ (8001128 <MX_USART1_UART_Init+0x4c>)
 8001114:	f002 f872 	bl	80031fc <HAL_UART_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800111e:	f000 f8e9 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200000cc 	.word	0x200000cc
 800112c:	40011000 	.word	0x40011000

08001130 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001134:	4b11      	ldr	r3, [pc, #68]	@ (800117c <MX_USART2_UART_Init+0x4c>)
 8001136:	4a12      	ldr	r2, [pc, #72]	@ (8001180 <MX_USART2_UART_Init+0x50>)
 8001138:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800113a:	4b10      	ldr	r3, [pc, #64]	@ (800117c <MX_USART2_UART_Init+0x4c>)
 800113c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001140:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001142:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <MX_USART2_UART_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001148:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <MX_USART2_UART_Init+0x4c>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800114e:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <MX_USART2_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001154:	4b09      	ldr	r3, [pc, #36]	@ (800117c <MX_USART2_UART_Init+0x4c>)
 8001156:	220c      	movs	r2, #12
 8001158:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115a:	4b08      	ldr	r3, [pc, #32]	@ (800117c <MX_USART2_UART_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <MX_USART2_UART_Init+0x4c>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001166:	4805      	ldr	r0, [pc, #20]	@ (800117c <MX_USART2_UART_Init+0x4c>)
 8001168:	f002 f848 	bl	80031fc <HAL_UART_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001172:	f000 f8bf 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000114 	.word	0x20000114
 8001180:	40004400 	.word	0x40004400

08001184 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001188:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <MX_USART6_UART_Init+0x4c>)
 800118a:	4a12      	ldr	r2, [pc, #72]	@ (80011d4 <MX_USART6_UART_Init+0x50>)
 800118c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800118e:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <MX_USART6_UART_Init+0x4c>)
 8001190:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001194:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001196:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <MX_USART6_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800119c:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <MX_USART6_UART_Init+0x4c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <MX_USART6_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80011a8:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <MX_USART6_UART_Init+0x4c>)
 80011aa:	220c      	movs	r2, #12
 80011ac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ae:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <MX_USART6_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b4:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <MX_USART6_UART_Init+0x4c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <MX_USART6_UART_Init+0x4c>)
 80011bc:	f002 f81e 	bl	80031fc <HAL_UART_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80011c6:	f000 f895 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2000015c 	.word	0x2000015c
 80011d4:	40011400 	.word	0x40011400

080011d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	@ 0x28
 80011dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	4b32      	ldr	r3, [pc, #200]	@ (80012bc <MX_GPIO_Init+0xe4>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	4a31      	ldr	r2, [pc, #196]	@ (80012bc <MX_GPIO_Init+0xe4>)
 80011f8:	f043 0304 	orr.w	r3, r3, #4
 80011fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fe:	4b2f      	ldr	r3, [pc, #188]	@ (80012bc <MX_GPIO_Init+0xe4>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b2b      	ldr	r3, [pc, #172]	@ (80012bc <MX_GPIO_Init+0xe4>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a2a      	ldr	r2, [pc, #168]	@ (80012bc <MX_GPIO_Init+0xe4>)
 8001214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b28      	ldr	r3, [pc, #160]	@ (80012bc <MX_GPIO_Init+0xe4>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	4b24      	ldr	r3, [pc, #144]	@ (80012bc <MX_GPIO_Init+0xe4>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	4a23      	ldr	r2, [pc, #140]	@ (80012bc <MX_GPIO_Init+0xe4>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6313      	str	r3, [r2, #48]	@ 0x30
 8001236:	4b21      	ldr	r3, [pc, #132]	@ (80012bc <MX_GPIO_Init+0xe4>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b1d      	ldr	r3, [pc, #116]	@ (80012bc <MX_GPIO_Init+0xe4>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	4a1c      	ldr	r2, [pc, #112]	@ (80012bc <MX_GPIO_Init+0xe4>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	6313      	str	r3, [r2, #48]	@ 0x30
 8001252:	4b1a      	ldr	r3, [pc, #104]	@ (80012bc <MX_GPIO_Init+0xe4>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001264:	4816      	ldr	r0, [pc, #88]	@ (80012c0 <MX_GPIO_Init+0xe8>)
 8001266:	f001 fb57 	bl	8002918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 8001270:	4814      	ldr	r0, [pc, #80]	@ (80012c4 <MX_GPIO_Init+0xec>)
 8001272:	f001 fb51 	bl	8002918 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001276:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800127a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127c:	2301      	movs	r3, #1
 800127e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	480c      	ldr	r0, [pc, #48]	@ (80012c0 <MX_GPIO_Init+0xe8>)
 8001290:	f001 f9be 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001294:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
 8001298:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129a:	2301      	movs	r3, #1
 800129c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <MX_GPIO_Init+0xec>)
 80012ae:	f001 f9af 	bl	8002610 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012b2:	bf00      	nop
 80012b4:	3728      	adds	r7, #40	@ 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020400 	.word	0x40020400

080012c8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 if (huart->Instance == USART2)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a05      	ldr	r2, [pc, #20]	@ (80012ec <HAL_UART_RxCpltCallback+0x24>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d102      	bne.n	80012e0 <HAL_UART_RxCpltCallback+0x18>
     { status = STATUS_OK; }
 80012da:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <HAL_UART_RxCpltCallback+0x28>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	40004400 	.word	0x40004400
 80012f0:	20000081 	.word	0x20000081

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <Error_Handler+0x8>

08001300 <update_crc>:
struct for_transfer data;

static const uint16_t crc16_table[256];

static uint16_t update_crc(uint16_t crc, uint8_t byte)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	460a      	mov	r2, r1
 800130a:	80fb      	strh	r3, [r7, #6]
 800130c:	4613      	mov	r3, r2
 800130e:	717b      	strb	r3, [r7, #5]
    return crc16_table[(crc ^ byte) & 0xFF] ^ (crc >> 8);
 8001310:	88fa      	ldrh	r2, [r7, #6]
 8001312:	797b      	ldrb	r3, [r7, #5]
 8001314:	4053      	eors	r3, r2
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4a06      	ldr	r2, [pc, #24]	@ (8001334 <update_crc+0x34>)
 800131a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	b29b      	uxth	r3, r3
 8001324:	4053      	eors	r3, r2
 8001326:	b29b      	uxth	r3, r3
}
 8001328:	4618      	mov	r0, r3
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	080047d0 	.word	0x080047d0

08001338 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t* array, int size) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
    uint16_t crc = CRC_INIT;
 8001342:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001346:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < size; i++) {
 8001348:	2300      	movs	r3, #0
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	e00d      	b.n	800136a <calculate_crc+0x32>
        crc = update_crc(crc, array[i]);
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	4413      	add	r3, r2
 8001354:	781a      	ldrb	r2, [r3, #0]
 8001356:	89fb      	ldrh	r3, [r7, #14]
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff ffd0 	bl	8001300 <update_crc>
 8001360:	4603      	mov	r3, r0
 8001362:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < size; i++) {
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	3301      	adds	r3, #1
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	429a      	cmp	r2, r3
 8001370:	dbed      	blt.n	800134e <calculate_crc+0x16>
    }
    return crc;
 8001372:	89fb      	ldrh	r3, [r7, #14]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <serialize_reply>:

void serialize_reply(struct for_transfer* data) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
    uint16_t crc;
    static uint16_t PAYLOAD_SIZE;

        PAYLOAD_SIZE = data->buf_size - 6;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	b29b      	uxth	r3, r3
 800138a:	3b06      	subs	r3, #6
 800138c:	b29a      	uxth	r2, r3
 800138e:	4b31      	ldr	r3, [pc, #196]	@ (8001454 <serialize_reply+0xd8>)
 8001390:	801a      	strh	r2, [r3, #0]
        data->buf[0] = SYNC_BYTE;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	22aa      	movs	r2, #170	@ 0xaa
 8001398:	701a      	strb	r2, [r3, #0]
        data->buf[1] = ((PAYLOAD_SIZE + DATA_SIZE_OFFSET) >> 0) & 0xff;
 800139a:	4b2e      	ldr	r3, [pc, #184]	@ (8001454 <serialize_reply+0xd8>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	3301      	adds	r3, #1
 80013a6:	3203      	adds	r2, #3
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	701a      	strb	r2, [r3, #0]
        data->buf[2] = ((PAYLOAD_SIZE + DATA_SIZE_OFFSET) >> 8) & 0xff;
 80013ac:	4b29      	ldr	r3, [pc, #164]	@ (8001454 <serialize_reply+0xd8>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	3303      	adds	r3, #3
 80013b2:	121a      	asrs	r2, r3, #8
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	3302      	adds	r3, #2
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	701a      	strb	r2, [r3, #0]
        data->buf[3] = data->cmd;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	3303      	adds	r3, #3
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	7a12      	ldrb	r2, [r2, #8]
 80013c8:	701a      	strb	r2, [r3, #0]
        data->buf[4] = data->status;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	3304      	adds	r3, #4
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	7a52      	ldrb	r2, [r2, #9]
 80013d4:	701a      	strb	r2, [r3, #0]
        int a = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
        for (int i = 5; i < data->buf_size - 2; i++)
 80013da:	2305      	movs	r3, #5
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	e00f      	b.n	8001400 <serialize_reply+0x84>
        {
            data->buf[i] = data->value[a];
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68da      	ldr	r2, [r3, #12]
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	441a      	add	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6819      	ldr	r1, [r3, #0]
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	440b      	add	r3, r1
 80013f0:	7812      	ldrb	r2, [r2, #0]
 80013f2:	701a      	strb	r2, [r3, #0]
            a++;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	3301      	adds	r3, #1
 80013f8:	617b      	str	r3, [r7, #20]
        for (int i = 5; i < data->buf_size - 2; i++)
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	3301      	adds	r3, #1
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	1e9a      	subs	r2, r3, #2
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	429a      	cmp	r2, r3
 800140a:	d8e9      	bhi.n	80013e0 <serialize_reply+0x64>
        }
        crc = calculate_crc(data->buf + 3, PAYLOAD_SIZE + 1);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	3303      	adds	r3, #3
 8001412:	4a10      	ldr	r2, [pc, #64]	@ (8001454 <serialize_reply+0xd8>)
 8001414:	8812      	ldrh	r2, [r2, #0]
 8001416:	3201      	adds	r2, #1
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff8c 	bl	8001338 <calculate_crc>
 8001420:	4603      	mov	r3, r0
 8001422:	81fb      	strh	r3, [r7, #14]
        data->buf[data->buf_size - 2] = (crc >> 0) & 0xff;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	3b02      	subs	r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	89fa      	ldrh	r2, [r7, #14]
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	701a      	strb	r2, [r3, #0]
        data->buf[data->buf_size - 1] = (crc >> 8) & 0xff;
 8001436:	89fb      	ldrh	r3, [r7, #14]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	b299      	uxth	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	3b01      	subs	r3, #1
 8001446:	4413      	add	r3, r2
 8001448:	b2ca      	uxtb	r2, r1
 800144a:	701a      	strb	r2, [r3, #0]

}
 800144c:	bf00      	nop
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2000028c 	.word	0x2000028c

08001458 <process_rx_byte>:

enum parser_result process_rx_byte(struct protocol_parser *parser, uint8_t byte) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	70fb      	strb	r3, [r7, #3]
    enum parser_result ret = PARSER_OK;
 8001464:	2300      	movs	r3, #0
 8001466:	73fb      	strb	r3, [r7, #15]

    switch (parser->state) {
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b06      	cmp	r3, #6
 800146e:	f200 80bb 	bhi.w	80015e8 <process_rx_byte+0x190>
 8001472:	a201      	add	r2, pc, #4	@ (adr r2, 8001478 <process_rx_byte+0x20>)
 8001474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001478:	08001495 	.word	0x08001495
 800147c:	080014b7 	.word	0x080014b7
 8001480:	080014c9 	.word	0x080014c9
 8001484:	0800150b 	.word	0x0800150b
 8001488:	08001543 	.word	0x08001543
 800148c:	0800158d 	.word	0x0800158d
 8001490:	080015af 	.word	0x080015af
    case STATE_SYNC:
        if (byte == SYNC_BYTE) {
 8001494:	78fb      	ldrb	r3, [r7, #3]
 8001496:	2baa      	cmp	r3, #170	@ 0xaa
 8001498:	f040 80a3 	bne.w	80015e2 <process_rx_byte+0x18a>
            parser->state = STATE_SIZE_L;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	701a      	strb	r2, [r3, #0]
            parser->crc = CRC_INIT;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014a8:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
            parser->buffer_length = 0;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
        }
        break;
 80014b4:	e095      	b.n	80015e2 <process_rx_byte+0x18a>
    case STATE_SIZE_L:
        parser->data_size = byte;
 80014b6:	78fb      	ldrb	r3, [r7, #3]
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
        parser->state = STATE_SIZE_H;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2202      	movs	r2, #2
 80014c4:	701a      	strb	r2, [r3, #0]
        break;
 80014c6:	e08f      	b.n	80015e8 <process_rx_byte+0x190>
    case STATE_SIZE_H:
        parser->data_size |= ((uint16_t)byte << 8);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	021b      	lsls	r3, r3, #8
 80014d4:	b21b      	sxth	r3, r3
 80014d6:	4313      	orrs	r3, r2
 80014d8:	b21b      	sxth	r3, r3
 80014da:	b29a      	uxth	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
        if (parser->data_size >= DATA_SIZE_OFFSET &&
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d908      	bls.n	80014fe <process_rx_byte+0xa6>
                parser->data_size <= MAX_DATA_SIZE + DATA_SIZE_OFFSET) {
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
        if (parser->data_size >= DATA_SIZE_OFFSET &&
 80014f2:	2bcc      	cmp	r3, #204	@ 0xcc
 80014f4:	d803      	bhi.n	80014fe <process_rx_byte+0xa6>
            parser->state = STATE_CMD;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2203      	movs	r2, #3
 80014fa:	701a      	strb	r2, [r3, #0]
        } else {
            parser->state = STATE_SYNC;
            ret = PARSER_ERROR;
        }
        break;
 80014fc:	e074      	b.n	80015e8 <process_rx_byte+0x190>
            parser->state = STATE_SYNC;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
            ret = PARSER_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	73fb      	strb	r3, [r7, #15]
        break;
 8001508:	e06e      	b.n	80015e8 <process_rx_byte+0x190>
    case STATE_CMD:
        parser->crc = update_crc(parser->crc, byte);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	@ 0xd4
 8001510:	78fa      	ldrb	r2, [r7, #3]
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fef3 	bl	8001300 <update_crc>
 800151a:	4603      	mov	r3, r0
 800151c:	461a      	mov	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
        parser->cmd = byte;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	78fa      	ldrb	r2, [r7, #3]
 8001528:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
        parser->state = (parser->data_size != DATA_SIZE_OFFSET) ? STATE_DATA : STATE_CRC_L;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 8001532:	2b03      	cmp	r3, #3
 8001534:	d001      	beq.n	800153a <process_rx_byte+0xe2>
 8001536:	2204      	movs	r2, #4
 8001538:	e000      	b.n	800153c <process_rx_byte+0xe4>
 800153a:	2205      	movs	r2, #5
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	701a      	strb	r2, [r3, #0]
        break;
 8001540:	e052      	b.n	80015e8 <process_rx_byte+0x190>
    case STATE_DATA:
        parser->crc = update_crc(parser->crc, byte);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	@ 0xd4
 8001548:	78fa      	ldrb	r2, [r7, #3]
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fed7 	bl	8001300 <update_crc>
 8001552:	4603      	mov	r3, r0
 8001554:	461a      	mov	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
        parser->buffer[parser->buffer_length++] = byte;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8001562:	1c59      	adds	r1, r3, #1
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	f8c2 10cc 	str.w	r1, [r2, #204]	@ 0xcc
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	78fa      	ldrb	r2, [r7, #3]
 8001570:	705a      	strb	r2, [r3, #1]
        if (parser->buffer_length + DATA_SIZE_OFFSET >= parser->data_size) {
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8001578:	3303      	adds	r3, #3
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	@ 0xd0
 8001580:	4293      	cmp	r3, r2
 8001582:	d330      	bcc.n	80015e6 <process_rx_byte+0x18e>
            parser->state = STATE_CRC_L;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2205      	movs	r2, #5
 8001588:	701a      	strb	r2, [r3, #0]
        }
        break;
 800158a:	e02c      	b.n	80015e6 <process_rx_byte+0x18e>
    case STATE_CRC_L:
        parser->crc = update_crc(parser->crc, byte);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	@ 0xd4
 8001592:	78fa      	ldrb	r2, [r7, #3]
 8001594:	4611      	mov	r1, r2
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff feb2 	bl	8001300 <update_crc>
 800159c:	4603      	mov	r3, r0
 800159e:	461a      	mov	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
        parser->state = STATE_CRC_H;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2206      	movs	r2, #6
 80015aa:	701a      	strb	r2, [r3, #0]
        break;
 80015ac:	e01c      	b.n	80015e8 <process_rx_byte+0x190>
    case STATE_CRC_H:
        parser->crc = update_crc(parser->crc, byte);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	@ 0xd4
 80015b4:	78fa      	ldrb	r2, [r7, #3]
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fea1 	bl	8001300 <update_crc>
 80015be:	4603      	mov	r3, r0
 80015c0:	461a      	mov	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
        parser->state = STATE_SYNC;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
        ret = (parser->crc == 0 ? PARSER_DONE : PARSER_ERROR);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	@ 0xd4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <process_rx_byte+0x184>
 80015d8:	2302      	movs	r3, #2
 80015da:	e000      	b.n	80015de <process_rx_byte+0x186>
 80015dc:	2301      	movs	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
        break;
 80015e0:	e002      	b.n	80015e8 <process_rx_byte+0x190>
        break;
 80015e2:	bf00      	nop
 80015e4:	e000      	b.n	80015e8 <process_rx_byte+0x190>
        break;
 80015e6:	bf00      	nop
    }

    return ret;
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop

080015f4 <choose_command>:

void choose_command(uint8_t* buffer, size_t* buffer_length)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
    switch (buffer[0])
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b09      	cmp	r3, #9
 8001604:	d847      	bhi.n	8001696 <choose_command+0xa2>
 8001606:	a201      	add	r2, pc, #4	@ (adr r2, 800160c <choose_command+0x18>)
 8001608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160c:	08001635 	.word	0x08001635
 8001610:	0800163d 	.word	0x0800163d
 8001614:	08001645 	.word	0x08001645
 8001618:	0800164d 	.word	0x0800164d
 800161c:	08001655 	.word	0x08001655
 8001620:	0800165d 	.word	0x0800165d
 8001624:	0800166b 	.word	0x0800166b
 8001628:	08001679 	.word	0x08001679
 800162c:	08001681 	.word	0x08001681
 8001630:	0800168f 	.word	0x0800168f
    {
    case APPLY_VOLTAGE_RL1:
    	apply_voltage_relay_1(buffer);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff f8a1 	bl	800077c <apply_voltage_relay_1>
        break;
 800163a:	e02c      	b.n	8001696 <choose_command+0xa2>
    case TEST_VOLTAGE_4_POINT:
    	test_voltage_4_point(buffer);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff f8d9 	bl	80007f4 <test_voltage_4_point>
        break;
 8001642:	e028      	b.n	8001696 <choose_command+0xa2>
    case ANALYSIS_VOLTAGE_CORRENT:
    	test_voltage_current(buffer);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff f91d 	bl	8000884 <test_voltage_current>
        break;
 800164a:	e024      	b.n	8001696 <choose_command+0xa2>
    case APPLY_VOLTAGE_RL2:
    	apply_voltage_relay_2(buffer);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff f93b 	bl	80008c8 <apply_voltage_relay_2>
        break;
 8001652:	e020      	b.n	8001696 <choose_command+0xa2>
    case TEST_VOLTAGE_11_POINT:
    	test_voltage_11_point(buffer);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff f973 	bl	8000940 <test_voltage_11_point>
        break;
 800165a:	e01c      	b.n	8001696 <choose_command+0xa2>
    case TEST_CORRENT_LASER:
    	*buffer_length = 201;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	22c9      	movs	r2, #201	@ 0xc9
 8001660:	601a      	str	r2, [r3, #0]
    	test_corrent_laser(buffer);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff f9f2 	bl	8000a4c <test_corrent_laser>
        break;
 8001668:	e015      	b.n	8001696 <choose_command+0xa2>
    case TEST_VOLTAGE_PELTIE:
    	*buffer_length = 5;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	2205      	movs	r2, #5
 800166e:	601a      	str	r2, [r3, #0]
    	test_voltage_peltie(buffer);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff fa79 	bl	8000b68 <test_voltage_peltie>
        break;
 8001676:	e00e      	b.n	8001696 <choose_command+0xa2>
    case APPLY_VOLTAGE_5_RL:
    	apply_voltage_relay_5(buffer);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff fb49 	bl	8000d10 <apply_voltage_relay_5>
        break;
 800167e:	e00a      	b.n	8001696 <choose_command+0xa2>
    case MASSAGE_RS232:
    	*buffer_length = 5;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	2205      	movs	r2, #5
 8001684:	601a      	str	r2, [r3, #0]
    	massage_rs232(buffer);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff fb7e 	bl	8000d88 <massage_rs232>
        break;
 800168c:	e003      	b.n	8001696 <choose_command+0xa2>
    case MASSAGE_NMEA:
    	massage_gps(buffer);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff fbc0 	bl	8000e14 <massage_gps>
        break;
 8001694:	bf00      	nop
    }
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop

080016a0 <transmission>:

void transmission(struct for_transfer* data, struct protocol_parser* parser) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]

    data->buf_size = 6 + parser->buffer_length;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80016b0:	1d9a      	adds	r2, r3, #6
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	605a      	str	r2, [r3, #4]
    data->cmd = parser->cmd;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	f893 20d2 	ldrb.w	r2, [r3, #210]	@ 0xd2
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	721a      	strb	r2, [r3, #8]
    data->status = parser->buffer[0];
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	785a      	ldrb	r2, [r3, #1]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	725a      	strb	r2, [r3, #9]
    data->value = (uint8_t*)malloc((parser->buffer_length - 1) * sizeof(uint8_t));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80016ce:	3b01      	subs	r3, #1
 80016d0:	4618      	mov	r0, r3
 80016d2:	f002 ff59 	bl	8004588 <malloc>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	60da      	str	r2, [r3, #12]
    if (data->value == NULL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d023      	beq.n	800172e <transmission+0x8e>
    {
        return;

    }
    for (size_t i = 0; i < parser->buffer_length - 1; i++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	e00c      	b.n	8001706 <transmission+0x66>
    {
        data->value[i] = parser->buffer[i + 1];
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68d9      	ldr	r1, [r3, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	440b      	add	r3, r1
 80016f8:	6839      	ldr	r1, [r7, #0]
 80016fa:	440a      	add	r2, r1
 80016fc:	7852      	ldrb	r2, [r2, #1]
 80016fe:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < parser->buffer_length - 1; i++)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	3301      	adds	r3, #1
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800170c:	3b01      	subs	r3, #1
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	429a      	cmp	r2, r3
 8001712:	d3eb      	bcc.n	80016ec <transmission+0x4c>
    }
    data->buf = (uint8_t*)malloc(data->buf_size * sizeof(uint8_t));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	4618      	mov	r0, r3
 800171a:	f002 ff35 	bl	8004588 <malloc>
 800171e:	4603      	mov	r3, r0
 8001720:	461a      	mov	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	601a      	str	r2, [r3, #0]
    if (data->buf == NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	e000      	b.n	8001730 <transmission+0x90>
        return;
 800172e:	bf00      	nop
    {
        return;

    }
}
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <HAL_MspInit+0x4c>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001746:	4a0f      	ldr	r2, [pc, #60]	@ (8001784 <HAL_MspInit+0x4c>)
 8001748:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800174c:	6453      	str	r3, [r2, #68]	@ 0x44
 800174e:	4b0d      	ldr	r3, [pc, #52]	@ (8001784 <HAL_MspInit+0x4c>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001752:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	603b      	str	r3, [r7, #0]
 800175e:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <HAL_MspInit+0x4c>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001762:	4a08      	ldr	r2, [pc, #32]	@ (8001784 <HAL_MspInit+0x4c>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001768:	6413      	str	r3, [r2, #64]	@ 0x40
 800176a:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <HAL_MspInit+0x4c>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800

08001788 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	@ 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a17      	ldr	r2, [pc, #92]	@ (8001804 <HAL_ADC_MspInit+0x7c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d127      	bne.n	80017fa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <HAL_ADC_MspInit+0x80>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b2:	4a15      	ldr	r2, [pc, #84]	@ (8001808 <HAL_ADC_MspInit+0x80>)
 80017b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ba:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <HAL_ADC_MspInit+0x80>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001808 <HAL_ADC_MspInit+0x80>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001808 <HAL_ADC_MspInit+0x80>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <HAL_ADC_MspInit+0x80>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80017e2:	23f3      	movs	r3, #243	@ 0xf3
 80017e4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017e6:	2303      	movs	r3, #3
 80017e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	4805      	ldr	r0, [pc, #20]	@ (800180c <HAL_ADC_MspInit+0x84>)
 80017f6:	f000 ff0b 	bl	8002610 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017fa:	bf00      	nop
 80017fc:	3728      	adds	r7, #40	@ 0x28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40012000 	.word	0x40012000
 8001808:	40023800 	.word	0x40023800
 800180c:	40020000 	.word	0x40020000

08001810 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08e      	sub	sp, #56	@ 0x38
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a54      	ldr	r2, [pc, #336]	@ (8001980 <HAL_UART_MspInit+0x170>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d135      	bne.n	800189e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	623b      	str	r3, [r7, #32]
 8001836:	4b53      	ldr	r3, [pc, #332]	@ (8001984 <HAL_UART_MspInit+0x174>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183a:	4a52      	ldr	r2, [pc, #328]	@ (8001984 <HAL_UART_MspInit+0x174>)
 800183c:	f043 0310 	orr.w	r3, r3, #16
 8001840:	6453      	str	r3, [r2, #68]	@ 0x44
 8001842:	4b50      	ldr	r3, [pc, #320]	@ (8001984 <HAL_UART_MspInit+0x174>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	623b      	str	r3, [r7, #32]
 800184c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
 8001852:	4b4c      	ldr	r3, [pc, #304]	@ (8001984 <HAL_UART_MspInit+0x174>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	4a4b      	ldr	r2, [pc, #300]	@ (8001984 <HAL_UART_MspInit+0x174>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6313      	str	r3, [r2, #48]	@ 0x30
 800185e:	4b49      	ldr	r3, [pc, #292]	@ (8001984 <HAL_UART_MspInit+0x174>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	61fb      	str	r3, [r7, #28]
 8001868:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800186a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800186e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001878:	2303      	movs	r3, #3
 800187a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800187c:	2307      	movs	r3, #7
 800187e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001880:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001884:	4619      	mov	r1, r3
 8001886:	4840      	ldr	r0, [pc, #256]	@ (8001988 <HAL_UART_MspInit+0x178>)
 8001888:	f000 fec2 	bl	8002610 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800188c:	2200      	movs	r2, #0
 800188e:	2100      	movs	r1, #0
 8001890:	2025      	movs	r0, #37	@ 0x25
 8001892:	f000 fde8 	bl	8002466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001896:	2025      	movs	r0, #37	@ 0x25
 8001898:	f000 fe01 	bl	800249e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800189c:	e06b      	b.n	8001976 <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a3a      	ldr	r2, [pc, #232]	@ (800198c <HAL_UART_MspInit+0x17c>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d134      	bne.n	8001912 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018a8:	2300      	movs	r3, #0
 80018aa:	61bb      	str	r3, [r7, #24]
 80018ac:	4b35      	ldr	r3, [pc, #212]	@ (8001984 <HAL_UART_MspInit+0x174>)
 80018ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b0:	4a34      	ldr	r2, [pc, #208]	@ (8001984 <HAL_UART_MspInit+0x174>)
 80018b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80018b8:	4b32      	ldr	r3, [pc, #200]	@ (8001984 <HAL_UART_MspInit+0x174>)
 80018ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c0:	61bb      	str	r3, [r7, #24]
 80018c2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001984 <HAL_UART_MspInit+0x174>)
 80018ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018cc:	4a2d      	ldr	r2, [pc, #180]	@ (8001984 <HAL_UART_MspInit+0x174>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001984 <HAL_UART_MspInit+0x174>)
 80018d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018e0:	230c      	movs	r3, #12
 80018e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ec:	2303      	movs	r3, #3
 80018ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018f0:	2307      	movs	r3, #7
 80018f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018f8:	4619      	mov	r1, r3
 80018fa:	4823      	ldr	r0, [pc, #140]	@ (8001988 <HAL_UART_MspInit+0x178>)
 80018fc:	f000 fe88 	bl	8002610 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001900:	2200      	movs	r2, #0
 8001902:	2100      	movs	r1, #0
 8001904:	2026      	movs	r0, #38	@ 0x26
 8001906:	f000 fdae 	bl	8002466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800190a:	2026      	movs	r0, #38	@ 0x26
 800190c:	f000 fdc7 	bl	800249e <HAL_NVIC_EnableIRQ>
}
 8001910:	e031      	b.n	8001976 <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART6)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a1e      	ldr	r2, [pc, #120]	@ (8001990 <HAL_UART_MspInit+0x180>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d12c      	bne.n	8001976 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	4b18      	ldr	r3, [pc, #96]	@ (8001984 <HAL_UART_MspInit+0x174>)
 8001922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001924:	4a17      	ldr	r2, [pc, #92]	@ (8001984 <HAL_UART_MspInit+0x174>)
 8001926:	f043 0320 	orr.w	r3, r3, #32
 800192a:	6453      	str	r3, [r2, #68]	@ 0x44
 800192c:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <HAL_UART_MspInit+0x174>)
 800192e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001930:	f003 0320 	and.w	r3, r3, #32
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <HAL_UART_MspInit+0x174>)
 800193e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001940:	4a10      	ldr	r2, [pc, #64]	@ (8001984 <HAL_UART_MspInit+0x174>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6313      	str	r3, [r2, #48]	@ 0x30
 8001948:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <HAL_UART_MspInit+0x174>)
 800194a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001954:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001958:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001966:	2308      	movs	r3, #8
 8001968:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800196e:	4619      	mov	r1, r3
 8001970:	4805      	ldr	r0, [pc, #20]	@ (8001988 <HAL_UART_MspInit+0x178>)
 8001972:	f000 fe4d 	bl	8002610 <HAL_GPIO_Init>
}
 8001976:	bf00      	nop
 8001978:	3738      	adds	r7, #56	@ 0x38
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40011000 	.word	0x40011000
 8001984:	40023800 	.word	0x40023800
 8001988:	40020000 	.word	0x40020000
 800198c:	40004400 	.word	0x40004400
 8001990:	40011400 	.word	0x40011400

08001994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <NMI_Handler+0x4>

0800199c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <HardFault_Handler+0x4>

080019a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <MemManage_Handler+0x4>

080019ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <BusFault_Handler+0x4>

080019b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <UsageFault_Handler+0x4>

080019bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ea:	f000 f8db 	bl	8001ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019f8:	4802      	ldr	r0, [pc, #8]	@ (8001a04 <USART1_IRQHandler+0x10>)
 80019fa:	f001 fe6f 	bl	80036dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200000cc 	.word	0x200000cc

08001a08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a0c:	4802      	ldr	r0, [pc, #8]	@ (8001a18 <USART2_IRQHandler+0x10>)
 8001a0e:	f001 fe65 	bl	80036dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000114 	.word	0x20000114

08001a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a24:	4a14      	ldr	r2, [pc, #80]	@ (8001a78 <_sbrk+0x5c>)
 8001a26:	4b15      	ldr	r3, [pc, #84]	@ (8001a7c <_sbrk+0x60>)
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a30:	4b13      	ldr	r3, [pc, #76]	@ (8001a80 <_sbrk+0x64>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d102      	bne.n	8001a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a38:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <_sbrk+0x64>)
 8001a3a:	4a12      	ldr	r2, [pc, #72]	@ (8001a84 <_sbrk+0x68>)
 8001a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a3e:	4b10      	ldr	r3, [pc, #64]	@ (8001a80 <_sbrk+0x64>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d207      	bcs.n	8001a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a4c:	f002 fe6a 	bl	8004724 <__errno>
 8001a50:	4603      	mov	r3, r0
 8001a52:	220c      	movs	r2, #12
 8001a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	e009      	b.n	8001a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a5c:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <_sbrk+0x64>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a62:	4b07      	ldr	r3, [pc, #28]	@ (8001a80 <_sbrk+0x64>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	4a05      	ldr	r2, [pc, #20]	@ (8001a80 <_sbrk+0x64>)
 8001a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20020000 	.word	0x20020000
 8001a7c:	00000400 	.word	0x00000400
 8001a80:	20000290 	.word	0x20000290
 8001a84:	200003e0 	.word	0x200003e0

08001a88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a8c:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <SystemInit+0x20>)
 8001a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a92:	4a05      	ldr	r2, [pc, #20]	@ (8001aa8 <SystemInit+0x20>)
 8001a94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001aac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ae4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ab0:	f7ff ffea 	bl	8001a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ab4:	480c      	ldr	r0, [pc, #48]	@ (8001ae8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ab6:	490d      	ldr	r1, [pc, #52]	@ (8001aec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8001af0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001abc:	e002      	b.n	8001ac4 <LoopCopyDataInit>

08001abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac2:	3304      	adds	r3, #4

08001ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac8:	d3f9      	bcc.n	8001abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aca:	4a0a      	ldr	r2, [pc, #40]	@ (8001af4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001acc:	4c0a      	ldr	r4, [pc, #40]	@ (8001af8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad0:	e001      	b.n	8001ad6 <LoopFillZerobss>

08001ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad4:	3204      	adds	r2, #4

08001ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad8:	d3fb      	bcc.n	8001ad2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ada:	f002 fe29 	bl	8004730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ade:	f7ff f9f1 	bl	8000ec4 <main>
  bx  lr    
 8001ae2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ae4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aec:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001af0:	080049f8 	.word	0x080049f8
  ldr r2, =_sbss
 8001af4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001af8:	200003e0 	.word	0x200003e0

08001afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001afc:	e7fe      	b.n	8001afc <ADC_IRQHandler>
	...

08001b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b04:	4b0e      	ldr	r3, [pc, #56]	@ (8001b40 <HAL_Init+0x40>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0d      	ldr	r2, [pc, #52]	@ (8001b40 <HAL_Init+0x40>)
 8001b0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b10:	4b0b      	ldr	r3, [pc, #44]	@ (8001b40 <HAL_Init+0x40>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a0a      	ldr	r2, [pc, #40]	@ (8001b40 <HAL_Init+0x40>)
 8001b16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b1c:	4b08      	ldr	r3, [pc, #32]	@ (8001b40 <HAL_Init+0x40>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a07      	ldr	r2, [pc, #28]	@ (8001b40 <HAL_Init+0x40>)
 8001b22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b28:	2003      	movs	r0, #3
 8001b2a:	f000 fc91 	bl	8002450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b2e:	200f      	movs	r0, #15
 8001b30:	f000 f808 	bl	8001b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b34:	f7ff fe00 	bl	8001738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023c00 	.word	0x40023c00

08001b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b4c:	4b12      	ldr	r3, [pc, #72]	@ (8001b98 <HAL_InitTick+0x54>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b12      	ldr	r3, [pc, #72]	@ (8001b9c <HAL_InitTick+0x58>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	4619      	mov	r1, r3
 8001b56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 fca9 	bl	80024ba <HAL_SYSTICK_Config>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e00e      	b.n	8001b90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b0f      	cmp	r3, #15
 8001b76:	d80a      	bhi.n	8001b8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b80:	f000 fc71 	bl	8002466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b84:	4a06      	ldr	r2, [pc, #24]	@ (8001ba0 <HAL_InitTick+0x5c>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e000      	b.n	8001b90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000000 	.word	0x20000000
 8001b9c:	20000008 	.word	0x20000008
 8001ba0:	20000004 	.word	0x20000004

08001ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <HAL_IncTick+0x20>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <HAL_IncTick+0x24>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	4a04      	ldr	r2, [pc, #16]	@ (8001bc8 <HAL_IncTick+0x24>)
 8001bb6:	6013      	str	r3, [r2, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000008 	.word	0x20000008
 8001bc8:	20000294 	.word	0x20000294

08001bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd0:	4b03      	ldr	r3, [pc, #12]	@ (8001be0 <HAL_GetTick+0x14>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000294 	.word	0x20000294

08001be4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e033      	b.n	8001c62 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d109      	bne.n	8001c16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff fdc0 	bl	8001788 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	f003 0310 	and.w	r3, r3, #16
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d118      	bne.n	8001c54 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c2a:	f023 0302 	bic.w	r3, r3, #2
 8001c2e:	f043 0202 	orr.w	r2, r3, #2
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 fa3e 	bl	80020b8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	f023 0303 	bic.w	r3, r3, #3
 8001c4a:	f043 0201 	orr.w	r2, r3, #1
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c52:	e001      	b.n	8001c58 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d101      	bne.n	8001c86 <HAL_ADC_Start+0x1a>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e097      	b.n	8001db6 <HAL_ADC_Start+0x14a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d018      	beq.n	8001cce <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689a      	ldr	r2, [r3, #8]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0201 	orr.w	r2, r2, #1
 8001caa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cac:	4b45      	ldr	r3, [pc, #276]	@ (8001dc4 <HAL_ADC_Start+0x158>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a45      	ldr	r2, [pc, #276]	@ (8001dc8 <HAL_ADC_Start+0x15c>)
 8001cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb6:	0c9a      	lsrs	r2, r3, #18
 8001cb8:	4613      	mov	r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4413      	add	r3, r2
 8001cbe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001cc0:	e002      	b.n	8001cc8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f9      	bne.n	8001cc2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d15f      	bne.n	8001d9c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d007      	beq.n	8001d0e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d06:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d1a:	d106      	bne.n	8001d2a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d20:	f023 0206 	bic.w	r2, r3, #6
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d28:	e002      	b.n	8001d30 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d38:	4b24      	ldr	r3, [pc, #144]	@ (8001dcc <HAL_ADC_Start+0x160>)
 8001d3a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001d44:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 031f 	and.w	r3, r3, #31
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10f      	bne.n	8001d72 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d129      	bne.n	8001db4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	e020      	b.n	8001db4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a16      	ldr	r2, [pc, #88]	@ (8001dd0 <HAL_ADC_Start+0x164>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d11b      	bne.n	8001db4 <HAL_ADC_Start+0x148>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d114      	bne.n	8001db4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	e00b      	b.n	8001db4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da0:	f043 0210 	orr.w	r2, r3, #16
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dac:	f043 0201 	orr.w	r2, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	431bde83 	.word	0x431bde83
 8001dcc:	40012300 	.word	0x40012300
 8001dd0:	40012000 	.word	0x40012000

08001dd4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_ADC_Stop+0x16>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e021      	b.n	8001e2e <HAL_ADC_Stop+0x5a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0201 	bic.w	r2, r2, #1
 8001e00:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d109      	bne.n	8001e24 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e14:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e18:	f023 0301 	bic.w	r3, r3, #1
 8001e1c:	f043 0201 	orr.w	r2, r3, #1
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x1c>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e113      	b.n	8002098 <HAL_ADC_ConfigChannel+0x244>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b09      	cmp	r3, #9
 8001e7e:	d925      	bls.n	8001ecc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68d9      	ldr	r1, [r3, #12]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4613      	mov	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4413      	add	r3, r2
 8001e94:	3b1e      	subs	r3, #30
 8001e96:	2207      	movs	r2, #7
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43da      	mvns	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	400a      	ands	r2, r1
 8001ea4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68d9      	ldr	r1, [r3, #12]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	4603      	mov	r3, r0
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4403      	add	r3, r0
 8001ebe:	3b1e      	subs	r3, #30
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	e022      	b.n	8001f12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6919      	ldr	r1, [r3, #16]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	2207      	movs	r2, #7
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43da      	mvns	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	400a      	ands	r2, r1
 8001eee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6919      	ldr	r1, [r3, #16]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	4618      	mov	r0, r3
 8001f02:	4603      	mov	r3, r0
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4403      	add	r3, r0
 8001f08:	409a      	lsls	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b06      	cmp	r3, #6
 8001f18:	d824      	bhi.n	8001f64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	3b05      	subs	r3, #5
 8001f2c:	221f      	movs	r2, #31
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43da      	mvns	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	400a      	ands	r2, r1
 8001f3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	4618      	mov	r0, r3
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	3b05      	subs	r3, #5
 8001f56:	fa00 f203 	lsl.w	r2, r0, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f62:	e04c      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b0c      	cmp	r3, #12
 8001f6a:	d824      	bhi.n	8001fb6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3b23      	subs	r3, #35	@ 0x23
 8001f7e:	221f      	movs	r2, #31
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43da      	mvns	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	400a      	ands	r2, r1
 8001f8c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3b23      	subs	r3, #35	@ 0x23
 8001fa8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fb4:	e023      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3b41      	subs	r3, #65	@ 0x41
 8001fc8:	221f      	movs	r2, #31
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43da      	mvns	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	400a      	ands	r2, r1
 8001fd6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	3b41      	subs	r3, #65	@ 0x41
 8001ff2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ffe:	4b29      	ldr	r3, [pc, #164]	@ (80020a4 <HAL_ADC_ConfigChannel+0x250>)
 8002000:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a28      	ldr	r2, [pc, #160]	@ (80020a8 <HAL_ADC_ConfigChannel+0x254>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d10f      	bne.n	800202c <HAL_ADC_ConfigChannel+0x1d8>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b12      	cmp	r3, #18
 8002012:	d10b      	bne.n	800202c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a1d      	ldr	r2, [pc, #116]	@ (80020a8 <HAL_ADC_ConfigChannel+0x254>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d12b      	bne.n	800208e <HAL_ADC_ConfigChannel+0x23a>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a1c      	ldr	r2, [pc, #112]	@ (80020ac <HAL_ADC_ConfigChannel+0x258>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d003      	beq.n	8002048 <HAL_ADC_ConfigChannel+0x1f4>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b11      	cmp	r3, #17
 8002046:	d122      	bne.n	800208e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a11      	ldr	r2, [pc, #68]	@ (80020ac <HAL_ADC_ConfigChannel+0x258>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d111      	bne.n	800208e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800206a:	4b11      	ldr	r3, [pc, #68]	@ (80020b0 <HAL_ADC_ConfigChannel+0x25c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a11      	ldr	r2, [pc, #68]	@ (80020b4 <HAL_ADC_ConfigChannel+0x260>)
 8002070:	fba2 2303 	umull	r2, r3, r2, r3
 8002074:	0c9a      	lsrs	r2, r3, #18
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002080:	e002      	b.n	8002088 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	3b01      	subs	r3, #1
 8002086:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f9      	bne.n	8002082 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	40012300 	.word	0x40012300
 80020a8:	40012000 	.word	0x40012000
 80020ac:	10000012 	.word	0x10000012
 80020b0:	20000000 	.word	0x20000000
 80020b4:	431bde83 	.word	0x431bde83

080020b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020c0:	4b79      	ldr	r3, [pc, #484]	@ (80022a8 <ADC_Init+0x1f0>)
 80020c2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	431a      	orrs	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6859      	ldr	r1, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	021a      	lsls	r2, r3, #8
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002110:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6859      	ldr	r1, [r3, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002132:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6899      	ldr	r1, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214a:	4a58      	ldr	r2, [pc, #352]	@ (80022ac <ADC_Init+0x1f4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d022      	beq.n	8002196 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800215e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6899      	ldr	r1, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002180:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6899      	ldr	r1, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	e00f      	b.n	80021b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0202 	bic.w	r2, r2, #2
 80021c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6899      	ldr	r1, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	7e1b      	ldrb	r3, [r3, #24]
 80021d0:	005a      	lsls	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d01b      	beq.n	800221c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021f2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002202:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6859      	ldr	r1, [r3, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220e:	3b01      	subs	r3, #1
 8002210:	035a      	lsls	r2, r3, #13
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	e007      	b.n	800222c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800222a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800223a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	3b01      	subs	r3, #1
 8002248:	051a      	lsls	r2, r3, #20
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002260:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6899      	ldr	r1, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800226e:	025a      	lsls	r2, r3, #9
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002286:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6899      	ldr	r1, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	029a      	lsls	r2, r3, #10
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	609a      	str	r2, [r3, #8]
}
 800229c:	bf00      	nop
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	40012300 	.word	0x40012300
 80022ac:	0f000001 	.word	0x0f000001

080022b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c0:	4b0c      	ldr	r3, [pc, #48]	@ (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022cc:	4013      	ands	r3, r2
 80022ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e2:	4a04      	ldr	r2, [pc, #16]	@ (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	60d3      	str	r3, [r2, #12]
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022fc:	4b04      	ldr	r3, [pc, #16]	@ (8002310 <__NVIC_GetPriorityGrouping+0x18>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	f003 0307 	and.w	r3, r3, #7
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	2b00      	cmp	r3, #0
 8002324:	db0b      	blt.n	800233e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	f003 021f 	and.w	r2, r3, #31
 800232c:	4907      	ldr	r1, [pc, #28]	@ (800234c <__NVIC_EnableIRQ+0x38>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	2001      	movs	r0, #1
 8002336:	fa00 f202 	lsl.w	r2, r0, r2
 800233a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	e000e100 	.word	0xe000e100

08002350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	6039      	str	r1, [r7, #0]
 800235a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002360:	2b00      	cmp	r3, #0
 8002362:	db0a      	blt.n	800237a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	b2da      	uxtb	r2, r3
 8002368:	490c      	ldr	r1, [pc, #48]	@ (800239c <__NVIC_SetPriority+0x4c>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	0112      	lsls	r2, r2, #4
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	440b      	add	r3, r1
 8002374:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002378:	e00a      	b.n	8002390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4908      	ldr	r1, [pc, #32]	@ (80023a0 <__NVIC_SetPriority+0x50>)
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	3b04      	subs	r3, #4
 8002388:	0112      	lsls	r2, r2, #4
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	440b      	add	r3, r1
 800238e:	761a      	strb	r2, [r3, #24]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000e100 	.word	0xe000e100
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	@ 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f1c3 0307 	rsb	r3, r3, #7
 80023be:	2b04      	cmp	r3, #4
 80023c0:	bf28      	it	cs
 80023c2:	2304      	movcs	r3, #4
 80023c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3304      	adds	r3, #4
 80023ca:	2b06      	cmp	r3, #6
 80023cc:	d902      	bls.n	80023d4 <NVIC_EncodePriority+0x30>
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3b03      	subs	r3, #3
 80023d2:	e000      	b.n	80023d6 <NVIC_EncodePriority+0x32>
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	f04f 32ff 	mov.w	r2, #4294967295
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43da      	mvns	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	401a      	ands	r2, r3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023ec:	f04f 31ff 	mov.w	r1, #4294967295
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	fa01 f303 	lsl.w	r3, r1, r3
 80023f6:	43d9      	mvns	r1, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023fc:	4313      	orrs	r3, r2
         );
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3724      	adds	r7, #36	@ 0x24
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3b01      	subs	r3, #1
 8002418:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800241c:	d301      	bcc.n	8002422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800241e:	2301      	movs	r3, #1
 8002420:	e00f      	b.n	8002442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002422:	4a0a      	ldr	r2, [pc, #40]	@ (800244c <SysTick_Config+0x40>)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3b01      	subs	r3, #1
 8002428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800242a:	210f      	movs	r1, #15
 800242c:	f04f 30ff 	mov.w	r0, #4294967295
 8002430:	f7ff ff8e 	bl	8002350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002434:	4b05      	ldr	r3, [pc, #20]	@ (800244c <SysTick_Config+0x40>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800243a:	4b04      	ldr	r3, [pc, #16]	@ (800244c <SysTick_Config+0x40>)
 800243c:	2207      	movs	r2, #7
 800243e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	e000e010 	.word	0xe000e010

08002450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff ff29 	bl	80022b0 <__NVIC_SetPriorityGrouping>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002466:	b580      	push	{r7, lr}
 8002468:	b086      	sub	sp, #24
 800246a:	af00      	add	r7, sp, #0
 800246c:	4603      	mov	r3, r0
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002478:	f7ff ff3e 	bl	80022f8 <__NVIC_GetPriorityGrouping>
 800247c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	6978      	ldr	r0, [r7, #20]
 8002484:	f7ff ff8e 	bl	80023a4 <NVIC_EncodePriority>
 8002488:	4602      	mov	r2, r0
 800248a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff5d 	bl	8002350 <__NVIC_SetPriority>
}
 8002496:	bf00      	nop
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	4603      	mov	r3, r0
 80024a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff31 	bl	8002314 <__NVIC_EnableIRQ>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff ffa2 	bl	800240c <SysTick_Config>
 80024c8:	4603      	mov	r3, r0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024e0:	f7ff fb74 	bl	8001bcc <HAL_GetTick>
 80024e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d008      	beq.n	8002504 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2280      	movs	r2, #128	@ 0x80
 80024f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e052      	b.n	80025aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0216 	bic.w	r2, r2, #22
 8002512:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002522:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	2b00      	cmp	r3, #0
 800252a:	d103      	bne.n	8002534 <HAL_DMA_Abort+0x62>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002530:	2b00      	cmp	r3, #0
 8002532:	d007      	beq.n	8002544 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0208 	bic.w	r2, r2, #8
 8002542:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0201 	bic.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002554:	e013      	b.n	800257e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002556:	f7ff fb39 	bl	8001bcc <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b05      	cmp	r3, #5
 8002562:	d90c      	bls.n	800257e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2220      	movs	r2, #32
 8002568:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2203      	movs	r2, #3
 800256e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e015      	b.n	80025aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1e4      	bne.n	8002556 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002590:	223f      	movs	r2, #63	@ 0x3f
 8002592:	409a      	lsls	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d004      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2280      	movs	r2, #128	@ 0x80
 80025ca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e00c      	b.n	80025ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2205      	movs	r2, #5
 80025d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0201 	bic.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	@ 0x24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	e159      	b.n	80028e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800262c:	2201      	movs	r2, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	429a      	cmp	r2, r3
 8002646:	f040 8148 	bne.w	80028da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	2b01      	cmp	r3, #1
 8002654:	d005      	beq.n	8002662 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800265e:	2b02      	cmp	r3, #2
 8002660:	d130      	bne.n	80026c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	2203      	movs	r2, #3
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002698:	2201      	movs	r2, #1
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	f003 0201 	and.w	r2, r3, #1
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d017      	beq.n	8002700 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	2203      	movs	r2, #3
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d123      	bne.n	8002754 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	08da      	lsrs	r2, r3, #3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3208      	adds	r2, #8
 8002714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	220f      	movs	r2, #15
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	08da      	lsrs	r2, r3, #3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3208      	adds	r2, #8
 800274e:	69b9      	ldr	r1, [r7, #24]
 8002750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	2203      	movs	r2, #3
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 0203 	and.w	r2, r3, #3
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80a2 	beq.w	80028da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	4b57      	ldr	r3, [pc, #348]	@ (80028f8 <HAL_GPIO_Init+0x2e8>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279e:	4a56      	ldr	r2, [pc, #344]	@ (80028f8 <HAL_GPIO_Init+0x2e8>)
 80027a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027a6:	4b54      	ldr	r3, [pc, #336]	@ (80028f8 <HAL_GPIO_Init+0x2e8>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027b2:	4a52      	ldr	r2, [pc, #328]	@ (80028fc <HAL_GPIO_Init+0x2ec>)
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	089b      	lsrs	r3, r3, #2
 80027b8:	3302      	adds	r3, #2
 80027ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	220f      	movs	r2, #15
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a49      	ldr	r2, [pc, #292]	@ (8002900 <HAL_GPIO_Init+0x2f0>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d019      	beq.n	8002812 <HAL_GPIO_Init+0x202>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a48      	ldr	r2, [pc, #288]	@ (8002904 <HAL_GPIO_Init+0x2f4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d013      	beq.n	800280e <HAL_GPIO_Init+0x1fe>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a47      	ldr	r2, [pc, #284]	@ (8002908 <HAL_GPIO_Init+0x2f8>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00d      	beq.n	800280a <HAL_GPIO_Init+0x1fa>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a46      	ldr	r2, [pc, #280]	@ (800290c <HAL_GPIO_Init+0x2fc>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d007      	beq.n	8002806 <HAL_GPIO_Init+0x1f6>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a45      	ldr	r2, [pc, #276]	@ (8002910 <HAL_GPIO_Init+0x300>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d101      	bne.n	8002802 <HAL_GPIO_Init+0x1f2>
 80027fe:	2304      	movs	r3, #4
 8002800:	e008      	b.n	8002814 <HAL_GPIO_Init+0x204>
 8002802:	2307      	movs	r3, #7
 8002804:	e006      	b.n	8002814 <HAL_GPIO_Init+0x204>
 8002806:	2303      	movs	r3, #3
 8002808:	e004      	b.n	8002814 <HAL_GPIO_Init+0x204>
 800280a:	2302      	movs	r3, #2
 800280c:	e002      	b.n	8002814 <HAL_GPIO_Init+0x204>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_GPIO_Init+0x204>
 8002812:	2300      	movs	r3, #0
 8002814:	69fa      	ldr	r2, [r7, #28]
 8002816:	f002 0203 	and.w	r2, r2, #3
 800281a:	0092      	lsls	r2, r2, #2
 800281c:	4093      	lsls	r3, r2
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002824:	4935      	ldr	r1, [pc, #212]	@ (80028fc <HAL_GPIO_Init+0x2ec>)
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	089b      	lsrs	r3, r3, #2
 800282a:	3302      	adds	r3, #2
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002832:	4b38      	ldr	r3, [pc, #224]	@ (8002914 <HAL_GPIO_Init+0x304>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002856:	4a2f      	ldr	r2, [pc, #188]	@ (8002914 <HAL_GPIO_Init+0x304>)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800285c:	4b2d      	ldr	r3, [pc, #180]	@ (8002914 <HAL_GPIO_Init+0x304>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002880:	4a24      	ldr	r2, [pc, #144]	@ (8002914 <HAL_GPIO_Init+0x304>)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002886:	4b23      	ldr	r3, [pc, #140]	@ (8002914 <HAL_GPIO_Init+0x304>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002914 <HAL_GPIO_Init+0x304>)
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028b0:	4b18      	ldr	r3, [pc, #96]	@ (8002914 <HAL_GPIO_Init+0x304>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028d4:	4a0f      	ldr	r2, [pc, #60]	@ (8002914 <HAL_GPIO_Init+0x304>)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3301      	adds	r3, #1
 80028de:	61fb      	str	r3, [r7, #28]
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	2b0f      	cmp	r3, #15
 80028e4:	f67f aea2 	bls.w	800262c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
 80028ec:	3724      	adds	r7, #36	@ 0x24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40013800 	.word	0x40013800
 8002900:	40020000 	.word	0x40020000
 8002904:	40020400 	.word	0x40020400
 8002908:	40020800 	.word	0x40020800
 800290c:	40020c00 	.word	0x40020c00
 8002910:	40021000 	.word	0x40021000
 8002914:	40013c00 	.word	0x40013c00

08002918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	807b      	strh	r3, [r7, #2]
 8002924:	4613      	mov	r3, r2
 8002926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002928:	787b      	ldrb	r3, [r7, #1]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800292e:	887a      	ldrh	r2, [r7, #2]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002934:	e003      	b.n	800293e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002936:	887b      	ldrh	r3, [r7, #2]
 8002938:	041a      	lsls	r2, r3, #16
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	619a      	str	r2, [r3, #24]
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e267      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d075      	beq.n	8002a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800296a:	4b88      	ldr	r3, [pc, #544]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b04      	cmp	r3, #4
 8002974:	d00c      	beq.n	8002990 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002976:	4b85      	ldr	r3, [pc, #532]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800297e:	2b08      	cmp	r3, #8
 8002980:	d112      	bne.n	80029a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002982:	4b82      	ldr	r3, [pc, #520]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800298a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800298e:	d10b      	bne.n	80029a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002990:	4b7e      	ldr	r3, [pc, #504]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d05b      	beq.n	8002a54 <HAL_RCC_OscConfig+0x108>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d157      	bne.n	8002a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e242      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029b0:	d106      	bne.n	80029c0 <HAL_RCC_OscConfig+0x74>
 80029b2:	4b76      	ldr	r3, [pc, #472]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a75      	ldr	r2, [pc, #468]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	e01d      	b.n	80029fc <HAL_RCC_OscConfig+0xb0>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029c8:	d10c      	bne.n	80029e4 <HAL_RCC_OscConfig+0x98>
 80029ca:	4b70      	ldr	r3, [pc, #448]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a6f      	ldr	r2, [pc, #444]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	4b6d      	ldr	r3, [pc, #436]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a6c      	ldr	r2, [pc, #432]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	e00b      	b.n	80029fc <HAL_RCC_OscConfig+0xb0>
 80029e4:	4b69      	ldr	r3, [pc, #420]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a68      	ldr	r2, [pc, #416]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	4b66      	ldr	r3, [pc, #408]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a65      	ldr	r2, [pc, #404]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d013      	beq.n	8002a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7ff f8e2 	bl	8001bcc <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a0c:	f7ff f8de 	bl	8001bcc <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b64      	cmp	r3, #100	@ 0x64
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e207      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1e:	4b5b      	ldr	r3, [pc, #364]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0xc0>
 8002a2a:	e014      	b.n	8002a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7ff f8ce 	bl	8001bcc <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a34:	f7ff f8ca 	bl	8001bcc <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	@ 0x64
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e1f3      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a46:	4b51      	ldr	r3, [pc, #324]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0xe8>
 8002a52:	e000      	b.n	8002a56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d063      	beq.n	8002b2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a62:	4b4a      	ldr	r3, [pc, #296]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00b      	beq.n	8002a86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a6e:	4b47      	ldr	r3, [pc, #284]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d11c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a7a:	4b44      	ldr	r3, [pc, #272]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d116      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a86:	4b41      	ldr	r3, [pc, #260]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d005      	beq.n	8002a9e <HAL_RCC_OscConfig+0x152>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d001      	beq.n	8002a9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e1c7      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4937      	ldr	r1, [pc, #220]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab2:	e03a      	b.n	8002b2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d020      	beq.n	8002afe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002abc:	4b34      	ldr	r3, [pc, #208]	@ (8002b90 <HAL_RCC_OscConfig+0x244>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac2:	f7ff f883 	bl	8001bcc <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aca:	f7ff f87f 	bl	8001bcc <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e1a8      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002adc:	4b2b      	ldr	r3, [pc, #172]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae8:	4b28      	ldr	r3, [pc, #160]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	4925      	ldr	r1, [pc, #148]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	600b      	str	r3, [r1, #0]
 8002afc:	e015      	b.n	8002b2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002afe:	4b24      	ldr	r3, [pc, #144]	@ (8002b90 <HAL_RCC_OscConfig+0x244>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7ff f862 	bl	8001bcc <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b0c:	f7ff f85e 	bl	8001bcc <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e187      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d036      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d016      	beq.n	8002b6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b3e:	4b15      	ldr	r3, [pc, #84]	@ (8002b94 <HAL_RCC_OscConfig+0x248>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b44:	f7ff f842 	bl	8001bcc <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b4c:	f7ff f83e 	bl	8001bcc <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e167      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002b60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0x200>
 8002b6a:	e01b      	b.n	8002ba4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b6c:	4b09      	ldr	r3, [pc, #36]	@ (8002b94 <HAL_RCC_OscConfig+0x248>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b72:	f7ff f82b 	bl	8001bcc <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b78:	e00e      	b.n	8002b98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b7a:	f7ff f827 	bl	8001bcc <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d907      	bls.n	8002b98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e150      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	42470000 	.word	0x42470000
 8002b94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b98:	4b88      	ldr	r3, [pc, #544]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002b9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1ea      	bne.n	8002b7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 8097 	beq.w	8002ce0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bb6:	4b81      	ldr	r3, [pc, #516]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10f      	bne.n	8002be2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	4b7d      	ldr	r3, [pc, #500]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	4a7c      	ldr	r2, [pc, #496]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002bcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bd2:	4b7a      	ldr	r3, [pc, #488]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bde:	2301      	movs	r3, #1
 8002be0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be2:	4b77      	ldr	r3, [pc, #476]	@ (8002dc0 <HAL_RCC_OscConfig+0x474>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d118      	bne.n	8002c20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bee:	4b74      	ldr	r3, [pc, #464]	@ (8002dc0 <HAL_RCC_OscConfig+0x474>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a73      	ldr	r2, [pc, #460]	@ (8002dc0 <HAL_RCC_OscConfig+0x474>)
 8002bf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bfa:	f7fe ffe7 	bl	8001bcc <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c02:	f7fe ffe3 	bl	8001bcc <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e10c      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c14:	4b6a      	ldr	r3, [pc, #424]	@ (8002dc0 <HAL_RCC_OscConfig+0x474>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d106      	bne.n	8002c36 <HAL_RCC_OscConfig+0x2ea>
 8002c28:	4b64      	ldr	r3, [pc, #400]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c2c:	4a63      	ldr	r2, [pc, #396]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c34:	e01c      	b.n	8002c70 <HAL_RCC_OscConfig+0x324>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b05      	cmp	r3, #5
 8002c3c:	d10c      	bne.n	8002c58 <HAL_RCC_OscConfig+0x30c>
 8002c3e:	4b5f      	ldr	r3, [pc, #380]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c42:	4a5e      	ldr	r2, [pc, #376]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c44:	f043 0304 	orr.w	r3, r3, #4
 8002c48:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c4a:	4b5c      	ldr	r3, [pc, #368]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4e:	4a5b      	ldr	r2, [pc, #364]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c56:	e00b      	b.n	8002c70 <HAL_RCC_OscConfig+0x324>
 8002c58:	4b58      	ldr	r3, [pc, #352]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c5c:	4a57      	ldr	r2, [pc, #348]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c64:	4b55      	ldr	r3, [pc, #340]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c68:	4a54      	ldr	r2, [pc, #336]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c6a:	f023 0304 	bic.w	r3, r3, #4
 8002c6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d015      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c78:	f7fe ffa8 	bl	8001bcc <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7e:	e00a      	b.n	8002c96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c80:	f7fe ffa4 	bl	8001bcc <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e0cb      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c96:	4b49      	ldr	r3, [pc, #292]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0ee      	beq.n	8002c80 <HAL_RCC_OscConfig+0x334>
 8002ca2:	e014      	b.n	8002cce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca4:	f7fe ff92 	bl	8001bcc <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002caa:	e00a      	b.n	8002cc2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cac:	f7fe ff8e 	bl	8001bcc <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e0b5      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc2:	4b3e      	ldr	r3, [pc, #248]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1ee      	bne.n	8002cac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cce:	7dfb      	ldrb	r3, [r7, #23]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d105      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cd4:	4b39      	ldr	r3, [pc, #228]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd8:	4a38      	ldr	r2, [pc, #224]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002cda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cde:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 80a1 	beq.w	8002e2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cea:	4b34      	ldr	r3, [pc, #208]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d05c      	beq.n	8002db0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d141      	bne.n	8002d82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfe:	4b31      	ldr	r3, [pc, #196]	@ (8002dc4 <HAL_RCC_OscConfig+0x478>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7fe ff62 	bl	8001bcc <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d0c:	f7fe ff5e 	bl	8001bcc <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e087      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1e:	4b27      	ldr	r3, [pc, #156]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69da      	ldr	r2, [r3, #28]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d38:	019b      	lsls	r3, r3, #6
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d40:	085b      	lsrs	r3, r3, #1
 8002d42:	3b01      	subs	r3, #1
 8002d44:	041b      	lsls	r3, r3, #16
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4c:	061b      	lsls	r3, r3, #24
 8002d4e:	491b      	ldr	r1, [pc, #108]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d54:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc4 <HAL_RCC_OscConfig+0x478>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5a:	f7fe ff37 	bl	8001bcc <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d62:	f7fe ff33 	bl	8001bcc <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e05c      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d74:	4b11      	ldr	r3, [pc, #68]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCC_OscConfig+0x416>
 8002d80:	e054      	b.n	8002e2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d82:	4b10      	ldr	r3, [pc, #64]	@ (8002dc4 <HAL_RCC_OscConfig+0x478>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fe ff20 	bl	8001bcc <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d90:	f7fe ff1c 	bl	8001bcc <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e045      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da2:	4b06      	ldr	r3, [pc, #24]	@ (8002dbc <HAL_RCC_OscConfig+0x470>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x444>
 8002dae:	e03d      	b.n	8002e2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d107      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e038      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	40007000 	.word	0x40007000
 8002dc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e38 <HAL_RCC_OscConfig+0x4ec>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d028      	beq.n	8002e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d121      	bne.n	8002e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d11a      	bne.n	8002e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002df8:	4013      	ands	r3, r2
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002dfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d111      	bne.n	8002e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0e:	085b      	lsrs	r3, r3, #1
 8002e10:	3b01      	subs	r3, #1
 8002e12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d107      	bne.n	8002e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800

08002e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e0cc      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e50:	4b68      	ldr	r3, [pc, #416]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d90c      	bls.n	8002e78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5e:	4b65      	ldr	r3, [pc, #404]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e66:	4b63      	ldr	r3, [pc, #396]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d001      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0b8      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d020      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e90:	4b59      	ldr	r3, [pc, #356]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	4a58      	ldr	r2, [pc, #352]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea8:	4b53      	ldr	r3, [pc, #332]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	4a52      	ldr	r2, [pc, #328]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002eb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb4:	4b50      	ldr	r3, [pc, #320]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	494d      	ldr	r1, [pc, #308]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d044      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d107      	bne.n	8002eea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eda:	4b47      	ldr	r3, [pc, #284]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d119      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e07f      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d003      	beq.n	8002efa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d107      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efa:	4b3f      	ldr	r3, [pc, #252]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e06f      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0a:	4b3b      	ldr	r3, [pc, #236]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e067      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f1a:	4b37      	ldr	r3, [pc, #220]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f023 0203 	bic.w	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	4934      	ldr	r1, [pc, #208]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f2c:	f7fe fe4e 	bl	8001bcc <HAL_GetTick>
 8002f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f34:	f7fe fe4a 	bl	8001bcc <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e04f      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4a:	4b2b      	ldr	r3, [pc, #172]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 020c 	and.w	r2, r3, #12
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d1eb      	bne.n	8002f34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f5c:	4b25      	ldr	r3, [pc, #148]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d20c      	bcs.n	8002f84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6a:	4b22      	ldr	r3, [pc, #136]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	4b20      	ldr	r3, [pc, #128]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e032      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f90:	4b19      	ldr	r3, [pc, #100]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	4916      	ldr	r1, [pc, #88]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d009      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fae:	4b12      	ldr	r3, [pc, #72]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	490e      	ldr	r1, [pc, #56]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fc2:	f000 f821 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	490a      	ldr	r1, [pc, #40]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c0>)
 8002fd4:	5ccb      	ldrb	r3, [r1, r3]
 8002fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fda:	4a09      	ldr	r2, [pc, #36]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fde:	4b09      	ldr	r3, [pc, #36]	@ (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe fdae 	bl	8001b44 <HAL_InitTick>

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40023c00 	.word	0x40023c00
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	080049d0 	.word	0x080049d0
 8003000:	20000000 	.word	0x20000000
 8003004:	20000004 	.word	0x20000004

08003008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800300c:	b090      	sub	sp, #64	@ 0x40
 800300e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	637b      	str	r3, [r7, #52]	@ 0x34
 8003014:	2300      	movs	r3, #0
 8003016:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003018:	2300      	movs	r3, #0
 800301a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800301c:	2300      	movs	r3, #0
 800301e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003020:	4b59      	ldr	r3, [pc, #356]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x180>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 030c 	and.w	r3, r3, #12
 8003028:	2b08      	cmp	r3, #8
 800302a:	d00d      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0x40>
 800302c:	2b08      	cmp	r3, #8
 800302e:	f200 80a1 	bhi.w	8003174 <HAL_RCC_GetSysClockFreq+0x16c>
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_RCC_GetSysClockFreq+0x34>
 8003036:	2b04      	cmp	r3, #4
 8003038:	d003      	beq.n	8003042 <HAL_RCC_GetSysClockFreq+0x3a>
 800303a:	e09b      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800303c:	4b53      	ldr	r3, [pc, #332]	@ (800318c <HAL_RCC_GetSysClockFreq+0x184>)
 800303e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003040:	e09b      	b.n	800317a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003042:	4b53      	ldr	r3, [pc, #332]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x188>)
 8003044:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003046:	e098      	b.n	800317a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003048:	4b4f      	ldr	r3, [pc, #316]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x180>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003050:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003052:	4b4d      	ldr	r3, [pc, #308]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x180>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d028      	beq.n	80030b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800305e:	4b4a      	ldr	r3, [pc, #296]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x180>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	099b      	lsrs	r3, r3, #6
 8003064:	2200      	movs	r2, #0
 8003066:	623b      	str	r3, [r7, #32]
 8003068:	627a      	str	r2, [r7, #36]	@ 0x24
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003070:	2100      	movs	r1, #0
 8003072:	4b47      	ldr	r3, [pc, #284]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x188>)
 8003074:	fb03 f201 	mul.w	r2, r3, r1
 8003078:	2300      	movs	r3, #0
 800307a:	fb00 f303 	mul.w	r3, r0, r3
 800307e:	4413      	add	r3, r2
 8003080:	4a43      	ldr	r2, [pc, #268]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x188>)
 8003082:	fba0 1202 	umull	r1, r2, r0, r2
 8003086:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003088:	460a      	mov	r2, r1
 800308a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800308c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800308e:	4413      	add	r3, r2
 8003090:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003094:	2200      	movs	r2, #0
 8003096:	61bb      	str	r3, [r7, #24]
 8003098:	61fa      	str	r2, [r7, #28]
 800309a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800309e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80030a2:	f7fd f899 	bl	80001d8 <__aeabi_uldivmod>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	4613      	mov	r3, r2
 80030ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030ae:	e053      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b0:	4b35      	ldr	r3, [pc, #212]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x180>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	099b      	lsrs	r3, r3, #6
 80030b6:	2200      	movs	r2, #0
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	617a      	str	r2, [r7, #20]
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030c2:	f04f 0b00 	mov.w	fp, #0
 80030c6:	4652      	mov	r2, sl
 80030c8:	465b      	mov	r3, fp
 80030ca:	f04f 0000 	mov.w	r0, #0
 80030ce:	f04f 0100 	mov.w	r1, #0
 80030d2:	0159      	lsls	r1, r3, #5
 80030d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030d8:	0150      	lsls	r0, r2, #5
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	ebb2 080a 	subs.w	r8, r2, sl
 80030e2:	eb63 090b 	sbc.w	r9, r3, fp
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030fa:	ebb2 0408 	subs.w	r4, r2, r8
 80030fe:	eb63 0509 	sbc.w	r5, r3, r9
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	00eb      	lsls	r3, r5, #3
 800310c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003110:	00e2      	lsls	r2, r4, #3
 8003112:	4614      	mov	r4, r2
 8003114:	461d      	mov	r5, r3
 8003116:	eb14 030a 	adds.w	r3, r4, sl
 800311a:	603b      	str	r3, [r7, #0]
 800311c:	eb45 030b 	adc.w	r3, r5, fp
 8003120:	607b      	str	r3, [r7, #4]
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800312e:	4629      	mov	r1, r5
 8003130:	028b      	lsls	r3, r1, #10
 8003132:	4621      	mov	r1, r4
 8003134:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003138:	4621      	mov	r1, r4
 800313a:	028a      	lsls	r2, r1, #10
 800313c:	4610      	mov	r0, r2
 800313e:	4619      	mov	r1, r3
 8003140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003142:	2200      	movs	r2, #0
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	60fa      	str	r2, [r7, #12]
 8003148:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800314c:	f7fd f844 	bl	80001d8 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003158:	4b0b      	ldr	r3, [pc, #44]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x180>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	0c1b      	lsrs	r3, r3, #16
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	3301      	adds	r3, #1
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003168:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800316a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003170:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003172:	e002      	b.n	800317a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003174:	4b05      	ldr	r3, [pc, #20]	@ (800318c <HAL_RCC_GetSysClockFreq+0x184>)
 8003176:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003178:	bf00      	nop
    }
  }
  return sysclockfreq;
 800317a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800317c:	4618      	mov	r0, r3
 800317e:	3740      	adds	r7, #64	@ 0x40
 8003180:	46bd      	mov	sp, r7
 8003182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003186:	bf00      	nop
 8003188:	40023800 	.word	0x40023800
 800318c:	00f42400 	.word	0x00f42400
 8003190:	017d7840 	.word	0x017d7840

08003194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003198:	4b03      	ldr	r3, [pc, #12]	@ (80031a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800319a:	681b      	ldr	r3, [r3, #0]
}
 800319c:	4618      	mov	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	20000000 	.word	0x20000000

080031ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031b0:	f7ff fff0 	bl	8003194 <HAL_RCC_GetHCLKFreq>
 80031b4:	4602      	mov	r2, r0
 80031b6:	4b05      	ldr	r3, [pc, #20]	@ (80031cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	0a9b      	lsrs	r3, r3, #10
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	4903      	ldr	r1, [pc, #12]	@ (80031d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031c2:	5ccb      	ldrb	r3, [r1, r3]
 80031c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40023800 	.word	0x40023800
 80031d0:	080049e0 	.word	0x080049e0

080031d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031d8:	f7ff ffdc 	bl	8003194 <HAL_RCC_GetHCLKFreq>
 80031dc:	4602      	mov	r2, r0
 80031de:	4b05      	ldr	r3, [pc, #20]	@ (80031f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	0b5b      	lsrs	r3, r3, #13
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	4903      	ldr	r1, [pc, #12]	@ (80031f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ea:	5ccb      	ldrb	r3, [r1, r3]
 80031ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40023800 	.word	0x40023800
 80031f8:	080049e0 	.word	0x080049e0

080031fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e042      	b.n	8003294 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d106      	bne.n	8003228 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7fe faf4 	bl	8001810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2224      	movs	r2, #36	@ 0x24
 800322c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800323e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 ff2d 	bl	80040a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	691a      	ldr	r2, [r3, #16]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003254:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695a      	ldr	r2, [r3, #20]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003264:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68da      	ldr	r2, [r3, #12]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003274:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08a      	sub	sp, #40	@ 0x28
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	4613      	mov	r3, r2
 80032aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b20      	cmp	r3, #32
 80032ba:	d175      	bne.n	80033a8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <HAL_UART_Transmit+0x2c>
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e06e      	b.n	80033aa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2221      	movs	r2, #33	@ 0x21
 80032d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032da:	f7fe fc77 	bl	8001bcc <HAL_GetTick>
 80032de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	88fa      	ldrh	r2, [r7, #6]
 80032e4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	88fa      	ldrh	r2, [r7, #6]
 80032ea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032f4:	d108      	bne.n	8003308 <HAL_UART_Transmit+0x6c>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d104      	bne.n	8003308 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	61bb      	str	r3, [r7, #24]
 8003306:	e003      	b.n	8003310 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800330c:	2300      	movs	r3, #0
 800330e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003310:	e02e      	b.n	8003370 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2200      	movs	r2, #0
 800331a:	2180      	movs	r1, #128	@ 0x80
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 fc8f 	bl	8003c40 <UART_WaitOnFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d005      	beq.n	8003334 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e03a      	b.n	80033aa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10b      	bne.n	8003352 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	461a      	mov	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003348:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	3302      	adds	r3, #2
 800334e:	61bb      	str	r3, [r7, #24]
 8003350:	e007      	b.n	8003362 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	781a      	ldrb	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	3301      	adds	r3, #1
 8003360:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003374:	b29b      	uxth	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1cb      	bne.n	8003312 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2200      	movs	r2, #0
 8003382:	2140      	movs	r1, #64	@ 0x40
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 fc5b 	bl	8003c40 <UART_WaitOnFlagUntilTimeout>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e006      	b.n	80033aa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	e000      	b.n	80033aa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80033a8:	2302      	movs	r3, #2
  }
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3720      	adds	r7, #32
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b08a      	sub	sp, #40	@ 0x28
 80033b6:	af02      	add	r7, sp, #8
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	603b      	str	r3, [r7, #0]
 80033be:	4613      	mov	r3, r2
 80033c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b20      	cmp	r3, #32
 80033d0:	f040 8081 	bne.w	80034d6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <HAL_UART_Receive+0x2e>
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e079      	b.n	80034d8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2222      	movs	r2, #34	@ 0x22
 80033ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033f8:	f7fe fbe8 	bl	8001bcc <HAL_GetTick>
 80033fc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	88fa      	ldrh	r2, [r7, #6]
 8003402:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	88fa      	ldrh	r2, [r7, #6]
 8003408:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003412:	d108      	bne.n	8003426 <HAL_UART_Receive+0x74>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d104      	bne.n	8003426 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800341c:	2300      	movs	r3, #0
 800341e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	e003      	b.n	800342e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800342a:	2300      	movs	r3, #0
 800342c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800342e:	e047      	b.n	80034c0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2200      	movs	r2, #0
 8003438:	2120      	movs	r1, #32
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 fc00 	bl	8003c40 <UART_WaitOnFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2220      	movs	r2, #32
 800344a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e042      	b.n	80034d8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10c      	bne.n	8003472 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	b29b      	uxth	r3, r3
 8003460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003464:	b29a      	uxth	r2, r3
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	3302      	adds	r3, #2
 800346e:	61bb      	str	r3, [r7, #24]
 8003470:	e01f      	b.n	80034b2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800347a:	d007      	beq.n	800348c <HAL_UART_Receive+0xda>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10a      	bne.n	800349a <HAL_UART_Receive+0xe8>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d106      	bne.n	800349a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	b2da      	uxtb	r2, r3
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	701a      	strb	r2, [r3, #0]
 8003498:	e008      	b.n	80034ac <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	3301      	adds	r3, #1
 80034b0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1b2      	bne.n	8003430 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	e000      	b.n	80034d8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80034d6:	2302      	movs	r3, #2
  }
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3720      	adds	r7, #32
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	4613      	mov	r3, r2
 80034ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b20      	cmp	r3, #32
 80034f8:	d121      	bne.n	800353e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <HAL_UART_Transmit_IT+0x26>
 8003500:	88fb      	ldrh	r3, [r7, #6]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e01a      	b.n	8003540 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	88fa      	ldrh	r2, [r7, #6]
 8003514:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	88fa      	ldrh	r2, [r7, #6]
 800351a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2221      	movs	r2, #33	@ 0x21
 8003526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003538:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	e000      	b.n	8003540 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800353e:	2302      	movs	r3, #2
  }
}
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	4613      	mov	r3, r2
 8003558:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b20      	cmp	r3, #32
 8003564:	d112      	bne.n	800358c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <HAL_UART_Receive_IT+0x26>
 800356c:	88fb      	ldrh	r3, [r7, #6]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e00b      	b.n	800358e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800357c:	88fb      	ldrh	r3, [r7, #6]
 800357e:	461a      	mov	r2, r3
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 fbb5 	bl	8003cf2 <UART_Start_Receive_IT>
 8003588:	4603      	mov	r3, r0
 800358a:	e000      	b.n	800358e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800358c:	2302      	movs	r3, #2
  }
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b09a      	sub	sp, #104	@ 0x68
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	330c      	adds	r3, #12
 80035a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035a8:	e853 3f00 	ldrex	r3, [r3]
 80035ac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80035ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	330c      	adds	r3, #12
 80035bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80035be:	657a      	str	r2, [r7, #84]	@ 0x54
 80035c0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80035c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80035c6:	e841 2300 	strex	r3, r2, [r1]
 80035ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80035cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1e5      	bne.n	800359e <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	3314      	adds	r3, #20
 80035d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035dc:	e853 3f00 	ldrex	r3, [r3]
 80035e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e4:	f023 0301 	bic.w	r3, r3, #1
 80035e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	3314      	adds	r3, #20
 80035f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80035f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80035f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035fa:	e841 2300 	strex	r3, r2, [r1]
 80035fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1e5      	bne.n	80035d2 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360a:	2b01      	cmp	r3, #1
 800360c:	d119      	bne.n	8003642 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	330c      	adds	r3, #12
 8003614:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	e853 3f00 	ldrex	r3, [r3]
 800361c:	61fb      	str	r3, [r7, #28]
   return(result);
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	f023 0310 	bic.w	r3, r3, #16
 8003624:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	330c      	adds	r3, #12
 800362c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800362e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003630:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003632:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003634:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003636:	e841 2300 	strex	r3, r2, [r1]
 800363a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800363c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1e5      	bne.n	800360e <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800364c:	2b40      	cmp	r3, #64	@ 0x40
 800364e:	d136      	bne.n	80036be <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3314      	adds	r3, #20
 8003656:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	e853 3f00 	ldrex	r3, [r3]
 800365e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003666:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3314      	adds	r3, #20
 800366e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003670:	61ba      	str	r2, [r7, #24]
 8003672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003674:	6979      	ldr	r1, [r7, #20]
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	e841 2300 	strex	r3, r2, [r1]
 800367c:	613b      	str	r3, [r7, #16]
   return(result);
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e5      	bne.n	8003650 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003688:	2b00      	cmp	r3, #0
 800368a:	d018      	beq.n	80036be <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003690:	2200      	movs	r2, #0
 8003692:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003698:	4618      	mov	r0, r3
 800369a:	f7fe ff1a 	bl	80024d2 <HAL_DMA_Abort>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00c      	beq.n	80036be <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fe ffa4 	bl	80025f6 <HAL_DMA_GetError>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	d104      	bne.n	80036be <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2210      	movs	r2, #16
 80036b8:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e00a      	b.n	80036d4 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3768      	adds	r7, #104	@ 0x68
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b0ba      	sub	sp, #232	@ 0xe8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003702:	2300      	movs	r3, #0
 8003704:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003708:	2300      	movs	r3, #0
 800370a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800370e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800371a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10f      	bne.n	8003742 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b00      	cmp	r3, #0
 800372c:	d009      	beq.n	8003742 <HAL_UART_IRQHandler+0x66>
 800372e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003732:	f003 0320 	and.w	r3, r3, #32
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 fbf2 	bl	8003f24 <UART_Receive_IT>
      return;
 8003740:	e25b      	b.n	8003bfa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003742:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 80de 	beq.w	8003908 <HAL_UART_IRQHandler+0x22c>
 800374c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d106      	bne.n	8003766 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800375c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80d1 	beq.w	8003908 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00b      	beq.n	800378a <HAL_UART_IRQHandler+0xae>
 8003772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003782:	f043 0201 	orr.w	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800378a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00b      	beq.n	80037ae <HAL_UART_IRQHandler+0xd2>
 8003796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d005      	beq.n	80037ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a6:	f043 0202 	orr.w	r2, r3, #2
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00b      	beq.n	80037d2 <HAL_UART_IRQHandler+0xf6>
 80037ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d005      	beq.n	80037d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ca:	f043 0204 	orr.w	r2, r3, #4
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d011      	beq.n	8003802 <HAL_UART_IRQHandler+0x126>
 80037de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037e2:	f003 0320 	and.w	r3, r3, #32
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d105      	bne.n	80037f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d005      	beq.n	8003802 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fa:	f043 0208 	orr.w	r2, r3, #8
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 81f2 	beq.w	8003bf0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800380c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003810:	f003 0320 	and.w	r3, r3, #32
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_UART_IRQHandler+0x14e>
 8003818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800381c:	f003 0320 	and.w	r3, r3, #32
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 fb7d 	bl	8003f24 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003834:	2b40      	cmp	r3, #64	@ 0x40
 8003836:	bf0c      	ite	eq
 8003838:	2301      	moveq	r3, #1
 800383a:	2300      	movne	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b00      	cmp	r3, #0
 800384c:	d103      	bne.n	8003856 <HAL_UART_IRQHandler+0x17a>
 800384e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003852:	2b00      	cmp	r3, #0
 8003854:	d04f      	beq.n	80038f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fa85 	bl	8003d66 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003866:	2b40      	cmp	r3, #64	@ 0x40
 8003868:	d141      	bne.n	80038ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	3314      	adds	r3, #20
 8003870:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003874:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003878:	e853 3f00 	ldrex	r3, [r3]
 800387c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003880:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003884:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003888:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3314      	adds	r3, #20
 8003892:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003896:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800389a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80038a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80038a6:	e841 2300 	strex	r3, r2, [r1]
 80038aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80038ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1d9      	bne.n	800386a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d013      	beq.n	80038e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c2:	4a7e      	ldr	r2, [pc, #504]	@ (8003abc <HAL_UART_IRQHandler+0x3e0>)
 80038c4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fe fe71 	bl	80025b2 <HAL_DMA_Abort_IT>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d016      	beq.n	8003904 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038e0:	4610      	mov	r0, r2
 80038e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e4:	e00e      	b.n	8003904 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f994 	bl	8003c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ec:	e00a      	b.n	8003904 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f990 	bl	8003c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f4:	e006      	b.n	8003904 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f98c 	bl	8003c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003902:	e175      	b.n	8003bf0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003904:	bf00      	nop
    return;
 8003906:	e173      	b.n	8003bf0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390c:	2b01      	cmp	r3, #1
 800390e:	f040 814f 	bne.w	8003bb0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003916:	f003 0310 	and.w	r3, r3, #16
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 8148 	beq.w	8003bb0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 8141 	beq.w	8003bb0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800392e:	2300      	movs	r3, #0
 8003930:	60bb      	str	r3, [r7, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	60bb      	str	r3, [r7, #8]
 8003942:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800394e:	2b40      	cmp	r3, #64	@ 0x40
 8003950:	f040 80b6 	bne.w	8003ac0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003960:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 8145 	beq.w	8003bf4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800396e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003972:	429a      	cmp	r2, r3
 8003974:	f080 813e 	bcs.w	8003bf4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800397e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800398a:	f000 8088 	beq.w	8003a9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	330c      	adds	r3, #12
 8003994:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800399c:	e853 3f00 	ldrex	r3, [r3]
 80039a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80039a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	330c      	adds	r3, #12
 80039b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80039ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80039c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039ca:	e841 2300 	strex	r3, r2, [r1]
 80039ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80039d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1d9      	bne.n	800398e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3314      	adds	r3, #20
 80039e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039e4:	e853 3f00 	ldrex	r3, [r3]
 80039e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80039ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039ec:	f023 0301 	bic.w	r3, r3, #1
 80039f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3314      	adds	r3, #20
 80039fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80039fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a02:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a0a:	e841 2300 	strex	r3, r2, [r1]
 8003a0e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1e1      	bne.n	80039da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3314      	adds	r3, #20
 8003a1c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3314      	adds	r3, #20
 8003a36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a42:	e841 2300 	strex	r3, r2, [r1]
 8003a46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1e3      	bne.n	8003a16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	330c      	adds	r3, #12
 8003a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a66:	e853 3f00 	ldrex	r3, [r3]
 8003a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a6e:	f023 0310 	bic.w	r3, r3, #16
 8003a72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003a80:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a82:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a84:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a86:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a88:	e841 2300 	strex	r3, r2, [r1]
 8003a8c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e3      	bne.n	8003a5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fe fd1a 	bl	80024d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f8b7 	bl	8003c28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003aba:	e09b      	b.n	8003bf4 <HAL_UART_IRQHandler+0x518>
 8003abc:	08003e2d 	.word	0x08003e2d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 808e 	beq.w	8003bf8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003adc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 8089 	beq.w	8003bf8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	330c      	adds	r3, #12
 8003aec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af0:	e853 3f00 	ldrex	r3, [r3]
 8003af4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003af8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003afc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	330c      	adds	r3, #12
 8003b06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003b0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b12:	e841 2300 	strex	r3, r2, [r1]
 8003b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1e3      	bne.n	8003ae6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3314      	adds	r3, #20
 8003b24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b28:	e853 3f00 	ldrex	r3, [r3]
 8003b2c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	f023 0301 	bic.w	r3, r3, #1
 8003b34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3314      	adds	r3, #20
 8003b3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b42:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b4a:	e841 2300 	strex	r3, r2, [r1]
 8003b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1e3      	bne.n	8003b1e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	330c      	adds	r3, #12
 8003b6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0310 	bic.w	r3, r3, #16
 8003b7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	330c      	adds	r3, #12
 8003b84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003b88:	61fa      	str	r2, [r7, #28]
 8003b8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8c:	69b9      	ldr	r1, [r7, #24]
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	e841 2300 	strex	r3, r2, [r1]
 8003b94:	617b      	str	r3, [r7, #20]
   return(result);
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e3      	bne.n	8003b64 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ba2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f83d 	bl	8003c28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bae:	e023      	b.n	8003bf8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d009      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x4f4>
 8003bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f943 	bl	8003e54 <UART_Transmit_IT>
    return;
 8003bce:	e014      	b.n	8003bfa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00e      	beq.n	8003bfa <HAL_UART_IRQHandler+0x51e>
 8003bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d008      	beq.n	8003bfa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f983 	bl	8003ef4 <UART_EndTransmit_IT>
    return;
 8003bee:	e004      	b.n	8003bfa <HAL_UART_IRQHandler+0x51e>
    return;
 8003bf0:	bf00      	nop
 8003bf2:	e002      	b.n	8003bfa <HAL_UART_IRQHandler+0x51e>
      return;
 8003bf4:	bf00      	nop
 8003bf6:	e000      	b.n	8003bfa <HAL_UART_IRQHandler+0x51e>
      return;
 8003bf8:	bf00      	nop
  }
}
 8003bfa:	37e8      	adds	r7, #232	@ 0xe8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	603b      	str	r3, [r7, #0]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c50:	e03b      	b.n	8003cca <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c58:	d037      	beq.n	8003cca <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c5a:	f7fd ffb7 	bl	8001bcc <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	6a3a      	ldr	r2, [r7, #32]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d302      	bcc.n	8003c70 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e03a      	b.n	8003cea <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d023      	beq.n	8003cca <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2b80      	cmp	r3, #128	@ 0x80
 8003c86:	d020      	beq.n	8003cca <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b40      	cmp	r3, #64	@ 0x40
 8003c8c:	d01d      	beq.n	8003cca <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d116      	bne.n	8003cca <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 f857 	bl	8003d66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2208      	movs	r2, #8
 8003cbc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e00f      	b.n	8003cea <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	bf0c      	ite	eq
 8003cda:	2301      	moveq	r3, #1
 8003cdc:	2300      	movne	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d0b4      	beq.n	8003c52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b085      	sub	sp, #20
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	88fa      	ldrh	r2, [r7, #6]
 8003d0a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	88fa      	ldrh	r2, [r7, #6]
 8003d10:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2222      	movs	r2, #34	@ 0x22
 8003d1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d007      	beq.n	8003d38 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d36:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695a      	ldr	r2, [r3, #20]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0220 	orr.w	r2, r2, #32
 8003d56:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b095      	sub	sp, #84	@ 0x54
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	330c      	adds	r3, #12
 8003d74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	330c      	adds	r3, #12
 8003d8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d8e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d96:	e841 2300 	strex	r3, r2, [r1]
 8003d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e5      	bne.n	8003d6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3314      	adds	r3, #20
 8003da8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	e853 3f00 	ldrex	r3, [r3]
 8003db0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	f023 0301 	bic.w	r3, r3, #1
 8003db8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3314      	adds	r3, #20
 8003dc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dca:	e841 2300 	strex	r3, r2, [r1]
 8003dce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1e5      	bne.n	8003da2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d119      	bne.n	8003e12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	330c      	adds	r3, #12
 8003de4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	e853 3f00 	ldrex	r3, [r3]
 8003dec:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	f023 0310 	bic.w	r3, r3, #16
 8003df4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	330c      	adds	r3, #12
 8003dfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dfe:	61ba      	str	r2, [r7, #24]
 8003e00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e02:	6979      	ldr	r1, [r7, #20]
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	e841 2300 	strex	r3, r2, [r1]
 8003e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1e5      	bne.n	8003dde <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e20:	bf00      	nop
 8003e22:	3754      	adds	r7, #84	@ 0x54
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f7ff fee4 	bl	8003c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e4c:	bf00      	nop
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b21      	cmp	r3, #33	@ 0x21
 8003e66:	d13e      	bne.n	8003ee6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e70:	d114      	bne.n	8003e9c <UART_Transmit_IT+0x48>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d110      	bne.n	8003e9c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	461a      	mov	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e8e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	1c9a      	adds	r2, r3, #2
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	621a      	str	r2, [r3, #32]
 8003e9a:	e008      	b.n	8003eae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	1c59      	adds	r1, r3, #1
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6211      	str	r1, [r2, #32]
 8003ea6:	781a      	ldrb	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	4619      	mov	r1, r3
 8003ebc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10f      	bne.n	8003ee2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ed0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ee0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	e000      	b.n	8003ee8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ee6:	2302      	movs	r3, #2
  }
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f0a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7ff fe73 	bl	8003c00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08c      	sub	sp, #48	@ 0x30
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b22      	cmp	r3, #34	@ 0x22
 8003f36:	f040 80ae 	bne.w	8004096 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f42:	d117      	bne.n	8003f74 <UART_Receive_IT+0x50>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d113      	bne.n	8003f74 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f54:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f66:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6c:	1c9a      	adds	r2, r3, #2
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f72:	e026      	b.n	8003fc2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f86:	d007      	beq.n	8003f98 <UART_Receive_IT+0x74>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10a      	bne.n	8003fa6 <UART_Receive_IT+0x82>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d106      	bne.n	8003fa6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa2:	701a      	strb	r2, [r3, #0]
 8003fa4:	e008      	b.n	8003fb8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	4619      	mov	r1, r3
 8003fd0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d15d      	bne.n	8004092 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0220 	bic.w	r2, r2, #32
 8003fe4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ff4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695a      	ldr	r2, [r3, #20]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0201 	bic.w	r2, r2, #1
 8004004:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2220      	movs	r2, #32
 800400a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004018:	2b01      	cmp	r3, #1
 800401a:	d135      	bne.n	8004088 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	330c      	adds	r3, #12
 8004028:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	613b      	str	r3, [r7, #16]
   return(result);
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f023 0310 	bic.w	r3, r3, #16
 8004038:	627b      	str	r3, [r7, #36]	@ 0x24
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	330c      	adds	r3, #12
 8004040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004042:	623a      	str	r2, [r7, #32]
 8004044:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	69f9      	ldr	r1, [r7, #28]
 8004048:	6a3a      	ldr	r2, [r7, #32]
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e5      	bne.n	8004022 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b10      	cmp	r3, #16
 8004062:	d10a      	bne.n	800407a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004064:	2300      	movs	r3, #0
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800407e:	4619      	mov	r1, r3
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7ff fdd1 	bl	8003c28 <HAL_UARTEx_RxEventCallback>
 8004086:	e002      	b.n	800408e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7fd f91d 	bl	80012c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	e002      	b.n	8004098 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	e000      	b.n	8004098 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004096:	2302      	movs	r3, #2
  }
}
 8004098:	4618      	mov	r0, r3
 800409a:	3730      	adds	r7, #48	@ 0x30
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040a4:	b0c0      	sub	sp, #256	@ 0x100
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80040b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040bc:	68d9      	ldr	r1, [r3, #12]
 80040be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	ea40 0301 	orr.w	r3, r0, r1
 80040c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	431a      	orrs	r2, r3
 80040d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	431a      	orrs	r2, r3
 80040e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80040f8:	f021 010c 	bic.w	r1, r1, #12
 80040fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004106:	430b      	orrs	r3, r1
 8004108:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800410a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800411a:	6999      	ldr	r1, [r3, #24]
 800411c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	ea40 0301 	orr.w	r3, r0, r1
 8004126:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	4b8f      	ldr	r3, [pc, #572]	@ (800436c <UART_SetConfig+0x2cc>)
 8004130:	429a      	cmp	r2, r3
 8004132:	d005      	beq.n	8004140 <UART_SetConfig+0xa0>
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	4b8d      	ldr	r3, [pc, #564]	@ (8004370 <UART_SetConfig+0x2d0>)
 800413c:	429a      	cmp	r2, r3
 800413e:	d104      	bne.n	800414a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004140:	f7ff f848 	bl	80031d4 <HAL_RCC_GetPCLK2Freq>
 8004144:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004148:	e003      	b.n	8004152 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800414a:	f7ff f82f 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 800414e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800415c:	f040 810c 	bne.w	8004378 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004164:	2200      	movs	r2, #0
 8004166:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800416a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800416e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004172:	4622      	mov	r2, r4
 8004174:	462b      	mov	r3, r5
 8004176:	1891      	adds	r1, r2, r2
 8004178:	65b9      	str	r1, [r7, #88]	@ 0x58
 800417a:	415b      	adcs	r3, r3
 800417c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800417e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004182:	4621      	mov	r1, r4
 8004184:	eb12 0801 	adds.w	r8, r2, r1
 8004188:	4629      	mov	r1, r5
 800418a:	eb43 0901 	adc.w	r9, r3, r1
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	f04f 0300 	mov.w	r3, #0
 8004196:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800419a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800419e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041a2:	4690      	mov	r8, r2
 80041a4:	4699      	mov	r9, r3
 80041a6:	4623      	mov	r3, r4
 80041a8:	eb18 0303 	adds.w	r3, r8, r3
 80041ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041b0:	462b      	mov	r3, r5
 80041b2:	eb49 0303 	adc.w	r3, r9, r3
 80041b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80041ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80041ce:	460b      	mov	r3, r1
 80041d0:	18db      	adds	r3, r3, r3
 80041d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80041d4:	4613      	mov	r3, r2
 80041d6:	eb42 0303 	adc.w	r3, r2, r3
 80041da:	657b      	str	r3, [r7, #84]	@ 0x54
 80041dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80041e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80041e4:	f7fb fff8 	bl	80001d8 <__aeabi_uldivmod>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4b61      	ldr	r3, [pc, #388]	@ (8004374 <UART_SetConfig+0x2d4>)
 80041ee:	fba3 2302 	umull	r2, r3, r3, r2
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	011c      	lsls	r4, r3, #4
 80041f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004200:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004204:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004208:	4642      	mov	r2, r8
 800420a:	464b      	mov	r3, r9
 800420c:	1891      	adds	r1, r2, r2
 800420e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004210:	415b      	adcs	r3, r3
 8004212:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004214:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004218:	4641      	mov	r1, r8
 800421a:	eb12 0a01 	adds.w	sl, r2, r1
 800421e:	4649      	mov	r1, r9
 8004220:	eb43 0b01 	adc.w	fp, r3, r1
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004230:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004234:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004238:	4692      	mov	sl, r2
 800423a:	469b      	mov	fp, r3
 800423c:	4643      	mov	r3, r8
 800423e:	eb1a 0303 	adds.w	r3, sl, r3
 8004242:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004246:	464b      	mov	r3, r9
 8004248:	eb4b 0303 	adc.w	r3, fp, r3
 800424c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800425c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004260:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004264:	460b      	mov	r3, r1
 8004266:	18db      	adds	r3, r3, r3
 8004268:	643b      	str	r3, [r7, #64]	@ 0x40
 800426a:	4613      	mov	r3, r2
 800426c:	eb42 0303 	adc.w	r3, r2, r3
 8004270:	647b      	str	r3, [r7, #68]	@ 0x44
 8004272:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004276:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800427a:	f7fb ffad 	bl	80001d8 <__aeabi_uldivmod>
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	4611      	mov	r1, r2
 8004284:	4b3b      	ldr	r3, [pc, #236]	@ (8004374 <UART_SetConfig+0x2d4>)
 8004286:	fba3 2301 	umull	r2, r3, r3, r1
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	2264      	movs	r2, #100	@ 0x64
 800428e:	fb02 f303 	mul.w	r3, r2, r3
 8004292:	1acb      	subs	r3, r1, r3
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800429a:	4b36      	ldr	r3, [pc, #216]	@ (8004374 <UART_SetConfig+0x2d4>)
 800429c:	fba3 2302 	umull	r2, r3, r3, r2
 80042a0:	095b      	lsrs	r3, r3, #5
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80042a8:	441c      	add	r4, r3
 80042aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042ae:	2200      	movs	r2, #0
 80042b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80042b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80042bc:	4642      	mov	r2, r8
 80042be:	464b      	mov	r3, r9
 80042c0:	1891      	adds	r1, r2, r2
 80042c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80042c4:	415b      	adcs	r3, r3
 80042c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80042cc:	4641      	mov	r1, r8
 80042ce:	1851      	adds	r1, r2, r1
 80042d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80042d2:	4649      	mov	r1, r9
 80042d4:	414b      	adcs	r3, r1
 80042d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	f04f 0300 	mov.w	r3, #0
 80042e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80042e4:	4659      	mov	r1, fp
 80042e6:	00cb      	lsls	r3, r1, #3
 80042e8:	4651      	mov	r1, sl
 80042ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ee:	4651      	mov	r1, sl
 80042f0:	00ca      	lsls	r2, r1, #3
 80042f2:	4610      	mov	r0, r2
 80042f4:	4619      	mov	r1, r3
 80042f6:	4603      	mov	r3, r0
 80042f8:	4642      	mov	r2, r8
 80042fa:	189b      	adds	r3, r3, r2
 80042fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004300:	464b      	mov	r3, r9
 8004302:	460a      	mov	r2, r1
 8004304:	eb42 0303 	adc.w	r3, r2, r3
 8004308:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004318:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800431c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004320:	460b      	mov	r3, r1
 8004322:	18db      	adds	r3, r3, r3
 8004324:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004326:	4613      	mov	r3, r2
 8004328:	eb42 0303 	adc.w	r3, r2, r3
 800432c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800432e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004332:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004336:	f7fb ff4f 	bl	80001d8 <__aeabi_uldivmod>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4b0d      	ldr	r3, [pc, #52]	@ (8004374 <UART_SetConfig+0x2d4>)
 8004340:	fba3 1302 	umull	r1, r3, r3, r2
 8004344:	095b      	lsrs	r3, r3, #5
 8004346:	2164      	movs	r1, #100	@ 0x64
 8004348:	fb01 f303 	mul.w	r3, r1, r3
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	3332      	adds	r3, #50	@ 0x32
 8004352:	4a08      	ldr	r2, [pc, #32]	@ (8004374 <UART_SetConfig+0x2d4>)
 8004354:	fba2 2303 	umull	r2, r3, r2, r3
 8004358:	095b      	lsrs	r3, r3, #5
 800435a:	f003 0207 	and.w	r2, r3, #7
 800435e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4422      	add	r2, r4
 8004366:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004368:	e106      	b.n	8004578 <UART_SetConfig+0x4d8>
 800436a:	bf00      	nop
 800436c:	40011000 	.word	0x40011000
 8004370:	40011400 	.word	0x40011400
 8004374:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800437c:	2200      	movs	r2, #0
 800437e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004382:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004386:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800438a:	4642      	mov	r2, r8
 800438c:	464b      	mov	r3, r9
 800438e:	1891      	adds	r1, r2, r2
 8004390:	6239      	str	r1, [r7, #32]
 8004392:	415b      	adcs	r3, r3
 8004394:	627b      	str	r3, [r7, #36]	@ 0x24
 8004396:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800439a:	4641      	mov	r1, r8
 800439c:	1854      	adds	r4, r2, r1
 800439e:	4649      	mov	r1, r9
 80043a0:	eb43 0501 	adc.w	r5, r3, r1
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	00eb      	lsls	r3, r5, #3
 80043ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043b2:	00e2      	lsls	r2, r4, #3
 80043b4:	4614      	mov	r4, r2
 80043b6:	461d      	mov	r5, r3
 80043b8:	4643      	mov	r3, r8
 80043ba:	18e3      	adds	r3, r4, r3
 80043bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043c0:	464b      	mov	r3, r9
 80043c2:	eb45 0303 	adc.w	r3, r5, r3
 80043c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80043ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043da:	f04f 0200 	mov.w	r2, #0
 80043de:	f04f 0300 	mov.w	r3, #0
 80043e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80043e6:	4629      	mov	r1, r5
 80043e8:	008b      	lsls	r3, r1, #2
 80043ea:	4621      	mov	r1, r4
 80043ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043f0:	4621      	mov	r1, r4
 80043f2:	008a      	lsls	r2, r1, #2
 80043f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80043f8:	f7fb feee 	bl	80001d8 <__aeabi_uldivmod>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	4b60      	ldr	r3, [pc, #384]	@ (8004584 <UART_SetConfig+0x4e4>)
 8004402:	fba3 2302 	umull	r2, r3, r3, r2
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	011c      	lsls	r4, r3, #4
 800440a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800440e:	2200      	movs	r2, #0
 8004410:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004414:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004418:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800441c:	4642      	mov	r2, r8
 800441e:	464b      	mov	r3, r9
 8004420:	1891      	adds	r1, r2, r2
 8004422:	61b9      	str	r1, [r7, #24]
 8004424:	415b      	adcs	r3, r3
 8004426:	61fb      	str	r3, [r7, #28]
 8004428:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800442c:	4641      	mov	r1, r8
 800442e:	1851      	adds	r1, r2, r1
 8004430:	6139      	str	r1, [r7, #16]
 8004432:	4649      	mov	r1, r9
 8004434:	414b      	adcs	r3, r1
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004444:	4659      	mov	r1, fp
 8004446:	00cb      	lsls	r3, r1, #3
 8004448:	4651      	mov	r1, sl
 800444a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800444e:	4651      	mov	r1, sl
 8004450:	00ca      	lsls	r2, r1, #3
 8004452:	4610      	mov	r0, r2
 8004454:	4619      	mov	r1, r3
 8004456:	4603      	mov	r3, r0
 8004458:	4642      	mov	r2, r8
 800445a:	189b      	adds	r3, r3, r2
 800445c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004460:	464b      	mov	r3, r9
 8004462:	460a      	mov	r2, r1
 8004464:	eb42 0303 	adc.w	r3, r2, r3
 8004468:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004476:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004484:	4649      	mov	r1, r9
 8004486:	008b      	lsls	r3, r1, #2
 8004488:	4641      	mov	r1, r8
 800448a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800448e:	4641      	mov	r1, r8
 8004490:	008a      	lsls	r2, r1, #2
 8004492:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004496:	f7fb fe9f 	bl	80001d8 <__aeabi_uldivmod>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	4611      	mov	r1, r2
 80044a0:	4b38      	ldr	r3, [pc, #224]	@ (8004584 <UART_SetConfig+0x4e4>)
 80044a2:	fba3 2301 	umull	r2, r3, r3, r1
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	2264      	movs	r2, #100	@ 0x64
 80044aa:	fb02 f303 	mul.w	r3, r2, r3
 80044ae:	1acb      	subs	r3, r1, r3
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	3332      	adds	r3, #50	@ 0x32
 80044b4:	4a33      	ldr	r2, [pc, #204]	@ (8004584 <UART_SetConfig+0x4e4>)
 80044b6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044c0:	441c      	add	r4, r3
 80044c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044c6:	2200      	movs	r2, #0
 80044c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80044ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80044cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80044d0:	4642      	mov	r2, r8
 80044d2:	464b      	mov	r3, r9
 80044d4:	1891      	adds	r1, r2, r2
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	415b      	adcs	r3, r3
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044e0:	4641      	mov	r1, r8
 80044e2:	1851      	adds	r1, r2, r1
 80044e4:	6039      	str	r1, [r7, #0]
 80044e6:	4649      	mov	r1, r9
 80044e8:	414b      	adcs	r3, r1
 80044ea:	607b      	str	r3, [r7, #4]
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044f8:	4659      	mov	r1, fp
 80044fa:	00cb      	lsls	r3, r1, #3
 80044fc:	4651      	mov	r1, sl
 80044fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004502:	4651      	mov	r1, sl
 8004504:	00ca      	lsls	r2, r1, #3
 8004506:	4610      	mov	r0, r2
 8004508:	4619      	mov	r1, r3
 800450a:	4603      	mov	r3, r0
 800450c:	4642      	mov	r2, r8
 800450e:	189b      	adds	r3, r3, r2
 8004510:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004512:	464b      	mov	r3, r9
 8004514:	460a      	mov	r2, r1
 8004516:	eb42 0303 	adc.w	r3, r2, r3
 800451a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800451c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	663b      	str	r3, [r7, #96]	@ 0x60
 8004526:	667a      	str	r2, [r7, #100]	@ 0x64
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	f04f 0300 	mov.w	r3, #0
 8004530:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004534:	4649      	mov	r1, r9
 8004536:	008b      	lsls	r3, r1, #2
 8004538:	4641      	mov	r1, r8
 800453a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800453e:	4641      	mov	r1, r8
 8004540:	008a      	lsls	r2, r1, #2
 8004542:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004546:	f7fb fe47 	bl	80001d8 <__aeabi_uldivmod>
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	4b0d      	ldr	r3, [pc, #52]	@ (8004584 <UART_SetConfig+0x4e4>)
 8004550:	fba3 1302 	umull	r1, r3, r3, r2
 8004554:	095b      	lsrs	r3, r3, #5
 8004556:	2164      	movs	r1, #100	@ 0x64
 8004558:	fb01 f303 	mul.w	r3, r1, r3
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	3332      	adds	r3, #50	@ 0x32
 8004562:	4a08      	ldr	r2, [pc, #32]	@ (8004584 <UART_SetConfig+0x4e4>)
 8004564:	fba2 2303 	umull	r2, r3, r2, r3
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	f003 020f 	and.w	r2, r3, #15
 800456e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4422      	add	r2, r4
 8004576:	609a      	str	r2, [r3, #8]
}
 8004578:	bf00      	nop
 800457a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800457e:	46bd      	mov	sp, r7
 8004580:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004584:	51eb851f 	.word	0x51eb851f

08004588 <malloc>:
 8004588:	4b02      	ldr	r3, [pc, #8]	@ (8004594 <malloc+0xc>)
 800458a:	4601      	mov	r1, r0
 800458c:	6818      	ldr	r0, [r3, #0]
 800458e:	f000 b825 	b.w	80045dc <_malloc_r>
 8004592:	bf00      	nop
 8004594:	2000000c 	.word	0x2000000c

08004598 <sbrk_aligned>:
 8004598:	b570      	push	{r4, r5, r6, lr}
 800459a:	4e0f      	ldr	r6, [pc, #60]	@ (80045d8 <sbrk_aligned+0x40>)
 800459c:	460c      	mov	r4, r1
 800459e:	6831      	ldr	r1, [r6, #0]
 80045a0:	4605      	mov	r5, r0
 80045a2:	b911      	cbnz	r1, 80045aa <sbrk_aligned+0x12>
 80045a4:	f000 f8ae 	bl	8004704 <_sbrk_r>
 80045a8:	6030      	str	r0, [r6, #0]
 80045aa:	4621      	mov	r1, r4
 80045ac:	4628      	mov	r0, r5
 80045ae:	f000 f8a9 	bl	8004704 <_sbrk_r>
 80045b2:	1c43      	adds	r3, r0, #1
 80045b4:	d103      	bne.n	80045be <sbrk_aligned+0x26>
 80045b6:	f04f 34ff 	mov.w	r4, #4294967295
 80045ba:	4620      	mov	r0, r4
 80045bc:	bd70      	pop	{r4, r5, r6, pc}
 80045be:	1cc4      	adds	r4, r0, #3
 80045c0:	f024 0403 	bic.w	r4, r4, #3
 80045c4:	42a0      	cmp	r0, r4
 80045c6:	d0f8      	beq.n	80045ba <sbrk_aligned+0x22>
 80045c8:	1a21      	subs	r1, r4, r0
 80045ca:	4628      	mov	r0, r5
 80045cc:	f000 f89a 	bl	8004704 <_sbrk_r>
 80045d0:	3001      	adds	r0, #1
 80045d2:	d1f2      	bne.n	80045ba <sbrk_aligned+0x22>
 80045d4:	e7ef      	b.n	80045b6 <sbrk_aligned+0x1e>
 80045d6:	bf00      	nop
 80045d8:	20000298 	.word	0x20000298

080045dc <_malloc_r>:
 80045dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045e0:	1ccd      	adds	r5, r1, #3
 80045e2:	f025 0503 	bic.w	r5, r5, #3
 80045e6:	3508      	adds	r5, #8
 80045e8:	2d0c      	cmp	r5, #12
 80045ea:	bf38      	it	cc
 80045ec:	250c      	movcc	r5, #12
 80045ee:	2d00      	cmp	r5, #0
 80045f0:	4606      	mov	r6, r0
 80045f2:	db01      	blt.n	80045f8 <_malloc_r+0x1c>
 80045f4:	42a9      	cmp	r1, r5
 80045f6:	d904      	bls.n	8004602 <_malloc_r+0x26>
 80045f8:	230c      	movs	r3, #12
 80045fa:	6033      	str	r3, [r6, #0]
 80045fc:	2000      	movs	r0, #0
 80045fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004602:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80046d8 <_malloc_r+0xfc>
 8004606:	f000 f869 	bl	80046dc <__malloc_lock>
 800460a:	f8d8 3000 	ldr.w	r3, [r8]
 800460e:	461c      	mov	r4, r3
 8004610:	bb44      	cbnz	r4, 8004664 <_malloc_r+0x88>
 8004612:	4629      	mov	r1, r5
 8004614:	4630      	mov	r0, r6
 8004616:	f7ff ffbf 	bl	8004598 <sbrk_aligned>
 800461a:	1c43      	adds	r3, r0, #1
 800461c:	4604      	mov	r4, r0
 800461e:	d158      	bne.n	80046d2 <_malloc_r+0xf6>
 8004620:	f8d8 4000 	ldr.w	r4, [r8]
 8004624:	4627      	mov	r7, r4
 8004626:	2f00      	cmp	r7, #0
 8004628:	d143      	bne.n	80046b2 <_malloc_r+0xd6>
 800462a:	2c00      	cmp	r4, #0
 800462c:	d04b      	beq.n	80046c6 <_malloc_r+0xea>
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	4639      	mov	r1, r7
 8004632:	4630      	mov	r0, r6
 8004634:	eb04 0903 	add.w	r9, r4, r3
 8004638:	f000 f864 	bl	8004704 <_sbrk_r>
 800463c:	4581      	cmp	r9, r0
 800463e:	d142      	bne.n	80046c6 <_malloc_r+0xea>
 8004640:	6821      	ldr	r1, [r4, #0]
 8004642:	1a6d      	subs	r5, r5, r1
 8004644:	4629      	mov	r1, r5
 8004646:	4630      	mov	r0, r6
 8004648:	f7ff ffa6 	bl	8004598 <sbrk_aligned>
 800464c:	3001      	adds	r0, #1
 800464e:	d03a      	beq.n	80046c6 <_malloc_r+0xea>
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	442b      	add	r3, r5
 8004654:	6023      	str	r3, [r4, #0]
 8004656:	f8d8 3000 	ldr.w	r3, [r8]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	bb62      	cbnz	r2, 80046b8 <_malloc_r+0xdc>
 800465e:	f8c8 7000 	str.w	r7, [r8]
 8004662:	e00f      	b.n	8004684 <_malloc_r+0xa8>
 8004664:	6822      	ldr	r2, [r4, #0]
 8004666:	1b52      	subs	r2, r2, r5
 8004668:	d420      	bmi.n	80046ac <_malloc_r+0xd0>
 800466a:	2a0b      	cmp	r2, #11
 800466c:	d917      	bls.n	800469e <_malloc_r+0xc2>
 800466e:	1961      	adds	r1, r4, r5
 8004670:	42a3      	cmp	r3, r4
 8004672:	6025      	str	r5, [r4, #0]
 8004674:	bf18      	it	ne
 8004676:	6059      	strne	r1, [r3, #4]
 8004678:	6863      	ldr	r3, [r4, #4]
 800467a:	bf08      	it	eq
 800467c:	f8c8 1000 	streq.w	r1, [r8]
 8004680:	5162      	str	r2, [r4, r5]
 8004682:	604b      	str	r3, [r1, #4]
 8004684:	4630      	mov	r0, r6
 8004686:	f000 f82f 	bl	80046e8 <__malloc_unlock>
 800468a:	f104 000b 	add.w	r0, r4, #11
 800468e:	1d23      	adds	r3, r4, #4
 8004690:	f020 0007 	bic.w	r0, r0, #7
 8004694:	1ac2      	subs	r2, r0, r3
 8004696:	bf1c      	itt	ne
 8004698:	1a1b      	subne	r3, r3, r0
 800469a:	50a3      	strne	r3, [r4, r2]
 800469c:	e7af      	b.n	80045fe <_malloc_r+0x22>
 800469e:	6862      	ldr	r2, [r4, #4]
 80046a0:	42a3      	cmp	r3, r4
 80046a2:	bf0c      	ite	eq
 80046a4:	f8c8 2000 	streq.w	r2, [r8]
 80046a8:	605a      	strne	r2, [r3, #4]
 80046aa:	e7eb      	b.n	8004684 <_malloc_r+0xa8>
 80046ac:	4623      	mov	r3, r4
 80046ae:	6864      	ldr	r4, [r4, #4]
 80046b0:	e7ae      	b.n	8004610 <_malloc_r+0x34>
 80046b2:	463c      	mov	r4, r7
 80046b4:	687f      	ldr	r7, [r7, #4]
 80046b6:	e7b6      	b.n	8004626 <_malloc_r+0x4a>
 80046b8:	461a      	mov	r2, r3
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	42a3      	cmp	r3, r4
 80046be:	d1fb      	bne.n	80046b8 <_malloc_r+0xdc>
 80046c0:	2300      	movs	r3, #0
 80046c2:	6053      	str	r3, [r2, #4]
 80046c4:	e7de      	b.n	8004684 <_malloc_r+0xa8>
 80046c6:	230c      	movs	r3, #12
 80046c8:	6033      	str	r3, [r6, #0]
 80046ca:	4630      	mov	r0, r6
 80046cc:	f000 f80c 	bl	80046e8 <__malloc_unlock>
 80046d0:	e794      	b.n	80045fc <_malloc_r+0x20>
 80046d2:	6005      	str	r5, [r0, #0]
 80046d4:	e7d6      	b.n	8004684 <_malloc_r+0xa8>
 80046d6:	bf00      	nop
 80046d8:	2000029c 	.word	0x2000029c

080046dc <__malloc_lock>:
 80046dc:	4801      	ldr	r0, [pc, #4]	@ (80046e4 <__malloc_lock+0x8>)
 80046de:	f000 b84b 	b.w	8004778 <__retarget_lock_acquire_recursive>
 80046e2:	bf00      	nop
 80046e4:	200003dc 	.word	0x200003dc

080046e8 <__malloc_unlock>:
 80046e8:	4801      	ldr	r0, [pc, #4]	@ (80046f0 <__malloc_unlock+0x8>)
 80046ea:	f000 b846 	b.w	800477a <__retarget_lock_release_recursive>
 80046ee:	bf00      	nop
 80046f0:	200003dc 	.word	0x200003dc

080046f4 <memset>:
 80046f4:	4402      	add	r2, r0
 80046f6:	4603      	mov	r3, r0
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d100      	bne.n	80046fe <memset+0xa>
 80046fc:	4770      	bx	lr
 80046fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004702:	e7f9      	b.n	80046f8 <memset+0x4>

08004704 <_sbrk_r>:
 8004704:	b538      	push	{r3, r4, r5, lr}
 8004706:	4d06      	ldr	r5, [pc, #24]	@ (8004720 <_sbrk_r+0x1c>)
 8004708:	2300      	movs	r3, #0
 800470a:	4604      	mov	r4, r0
 800470c:	4608      	mov	r0, r1
 800470e:	602b      	str	r3, [r5, #0]
 8004710:	f7fd f984 	bl	8001a1c <_sbrk>
 8004714:	1c43      	adds	r3, r0, #1
 8004716:	d102      	bne.n	800471e <_sbrk_r+0x1a>
 8004718:	682b      	ldr	r3, [r5, #0]
 800471a:	b103      	cbz	r3, 800471e <_sbrk_r+0x1a>
 800471c:	6023      	str	r3, [r4, #0]
 800471e:	bd38      	pop	{r3, r4, r5, pc}
 8004720:	200003d8 	.word	0x200003d8

08004724 <__errno>:
 8004724:	4b01      	ldr	r3, [pc, #4]	@ (800472c <__errno+0x8>)
 8004726:	6818      	ldr	r0, [r3, #0]
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	2000000c 	.word	0x2000000c

08004730 <__libc_init_array>:
 8004730:	b570      	push	{r4, r5, r6, lr}
 8004732:	4d0d      	ldr	r5, [pc, #52]	@ (8004768 <__libc_init_array+0x38>)
 8004734:	4c0d      	ldr	r4, [pc, #52]	@ (800476c <__libc_init_array+0x3c>)
 8004736:	1b64      	subs	r4, r4, r5
 8004738:	10a4      	asrs	r4, r4, #2
 800473a:	2600      	movs	r6, #0
 800473c:	42a6      	cmp	r6, r4
 800473e:	d109      	bne.n	8004754 <__libc_init_array+0x24>
 8004740:	4d0b      	ldr	r5, [pc, #44]	@ (8004770 <__libc_init_array+0x40>)
 8004742:	4c0c      	ldr	r4, [pc, #48]	@ (8004774 <__libc_init_array+0x44>)
 8004744:	f000 f81a 	bl	800477c <_init>
 8004748:	1b64      	subs	r4, r4, r5
 800474a:	10a4      	asrs	r4, r4, #2
 800474c:	2600      	movs	r6, #0
 800474e:	42a6      	cmp	r6, r4
 8004750:	d105      	bne.n	800475e <__libc_init_array+0x2e>
 8004752:	bd70      	pop	{r4, r5, r6, pc}
 8004754:	f855 3b04 	ldr.w	r3, [r5], #4
 8004758:	4798      	blx	r3
 800475a:	3601      	adds	r6, #1
 800475c:	e7ee      	b.n	800473c <__libc_init_array+0xc>
 800475e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004762:	4798      	blx	r3
 8004764:	3601      	adds	r6, #1
 8004766:	e7f2      	b.n	800474e <__libc_init_array+0x1e>
 8004768:	080049f0 	.word	0x080049f0
 800476c:	080049f0 	.word	0x080049f0
 8004770:	080049f0 	.word	0x080049f0
 8004774:	080049f4 	.word	0x080049f4

08004778 <__retarget_lock_acquire_recursive>:
 8004778:	4770      	bx	lr

0800477a <__retarget_lock_release_recursive>:
 800477a:	4770      	bx	lr

0800477c <_init>:
 800477c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477e:	bf00      	nop
 8004780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004782:	bc08      	pop	{r3}
 8004784:	469e      	mov	lr, r3
 8004786:	4770      	bx	lr

08004788 <_fini>:
 8004788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478a:	bf00      	nop
 800478c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800478e:	bc08      	pop	{r3}
 8004790:	469e      	mov	lr, r3
 8004792:	4770      	bx	lr
